{
  "version": 3,
  "sources": ["../ts/city.ts"],
  "sourcesContent": ["export interface NaturalDimensions {\n    naturalWidth: number;\n    naturalHeight: number;\n}\n\nexport interface RealDimensions {\n    width: number;\n    height: number;\n}\n\nconst getElementNaturalDimensions = (element: HTMLImageElement): NaturalDimensions => {\n    const { naturalHeight, naturalWidth } = element;\n\n    return {\n        naturalHeight,\n        naturalWidth,\n    };\n};\n\nconst getElementRealDimensions = (element: HTMLElement): RealDimensions => {\n    const { width, height } = element.getBoundingClientRect();\n\n    return {\n        width,\n        height,\n    };\n};\n\nexport const placeImageMarker = (mapId: string): void => {\n    const mapElement = document.getElementById(`map-image-${mapId}`);\n    const markerElement = document.getElementById(`map-marker-${mapId}`);\n\n    if (mapElement instanceof HTMLImageElement && markerElement instanceof HTMLElement) {\n        const mapNaturalDimensions = getElementNaturalDimensions(mapElement);\n        const mapRealDimensions = getElementRealDimensions(mapElement);\n\n        const markerRealDimensions = getElementRealDimensions(markerElement);\n\n        const { markerx, markery } = markerElement.dataset;\n\n        if (markerx && markery) {\n            const markerRelativeX = Math.round(\n                (parseInt(markerx) * mapRealDimensions.width) / mapNaturalDimensions.naturalWidth -\n                    markerRealDimensions.width / 2,\n            );\n\n            const markerRelativeY = Math.round(\n                (parseInt(markery) * mapRealDimensions.height) /\n                    mapNaturalDimensions.naturalHeight -\n                    markerRealDimensions.height,\n            );\n\n            markerElement.style.top = `${markerRelativeY}px`;\n            markerElement.style.left = `${markerRelativeX}px`;\n\n            if (markerElement.classList.contains('opacity-0')) {\n                markerElement.classList.remove('opacity-0');\n            }\n        } else {\n            throw new Error('Marker coordinates not provided');\n        }\n    } else {\n        throw new Error('Invalid Map or Marker element');\n    }\n};\n\nconst getMapId = (text: string): string => {\n    const lastKebabCaseItem = text.split('-').slice(-1);\n\n    if (lastKebabCaseItem[0]) {\n        return lastKebabCaseItem[0];\n    }\n\n    throw new Error('Map ID not found');\n};\n\nconst handleMapSelectorChange = (event: Event) => {\n    const target = event.target as HTMLElement; // Assumption that event.target exists\n    const mapId = getMapId(target.id);\n\n    const mapWrappers = document.querySelectorAll('[id^=map-imagewrapper-]');\n\n    // Hide all maps\n    mapWrappers.forEach((mapWrapper) => {\n        if (!mapWrapper.classList.contains('hidden')) {\n            mapWrapper.classList.add('hidden');\n        }\n    });\n\n    // Remove hidden from selected Map\n    const selectedImageWrapper = document.getElementById(`map-imagewrapper-${mapId}`);\n    if (selectedImageWrapper) {\n        selectedImageWrapper.classList.remove('hidden');\n    }\n\n    // Place Marker in Selected Map\n    placeImageMarker(mapId);\n};\n\nconst setImageSelectorListener = () => {\n    const mapButtons = document.querySelectorAll('input[name=\"map-selector\"]');\n\n    mapButtons.forEach((element) => {\n        element.addEventListener('change', handleMapSelectorChange);\n    });\n};\n\nconst placeVisibleMarker = () => {\n    const visibleImageWrapper = document.querySelector('[id^=\"map-imagewrapper-\"]:not(.hidden)');\n\n    if (visibleImageWrapper) {\n        const mapId = getMapId(visibleImageWrapper.id);\n        placeImageMarker(mapId);\n    }\n};\n\ndocument.addEventListener('DOMContentLoaded', () => {\n    placeVisibleMarker();\n    window.addEventListener('resize', placeVisibleMarker);\n    setImageSelectorListener();\n});\n"],
  "mappings": "AAUA,MAAM,8BAA8B,CAAC,YAAiD;AAClF,QAAM,EAAE,eAAe,iBAAiB;AAExC,SAAO;AAAA,IACH;AAAA,IACA;AAAA;AAAA;AAIR,MAAM,2BAA2B,CAAC,YAAyC;AACvE,QAAM,EAAE,OAAO,WAAW,QAAQ;AAElC,SAAO;AAAA,IACH;AAAA,IACA;AAAA;AAAA;AAID,aAAM,mBAAmB,CAAC,UAAwB;AACrD,QAAM,aAAa,SAAS,eAAe,aAAa;AACxD,QAAM,gBAAgB,SAAS,eAAe,cAAc;AAE5D,MAAI,sBAAsB,oBAAoB,yBAAyB,aAAa;AAChF,UAAM,uBAAuB,4BAA4B;AACzD,UAAM,oBAAoB,yBAAyB;AAEnD,UAAM,uBAAuB,yBAAyB;AAEtD,UAAM,EAAE,SAAS,YAAY,cAAc;AAE3C,QAAI,WAAW,SAAS;AACpB,YAAM,kBAAkB,KAAK,MACxB,SAAS,WAAW,kBAAkB,QAAS,qBAAqB,eACjE,qBAAqB,QAAQ;AAGrC,YAAM,kBAAkB,KAAK,MACxB,SAAS,WAAW,kBAAkB,SACnC,qBAAqB,gBACrB,qBAAqB;AAG7B,oBAAc,MAAM,MAAM,GAAG;AAC7B,oBAAc,MAAM,OAAO,GAAG;AAE9B,UAAI,cAAc,UAAU,SAAS,cAAc;AAC/C,sBAAc,UAAU,OAAO;AAAA;AAAA,WAEhC;AACH,YAAM,IAAI,MAAM;AAAA;AAAA,SAEjB;AACH,UAAM,IAAI,MAAM;AAAA;AAAA;AAIxB,MAAM,WAAW,CAAC,SAAyB;AACvC,QAAM,oBAAoB,KAAK,MAAM,KAAK,MAAM;AAEhD,MAAI,kBAAkB,IAAI;AACtB,WAAO,kBAAkB;AAAA;AAG7B,QAAM,IAAI,MAAM;AAAA;AAGpB,MAAM,0BAA0B,CAAC,UAAiB;AAC9C,QAAM,SAAS,MAAM;AACrB,QAAM,QAAQ,SAAS,OAAO;AAE9B,QAAM,cAAc,SAAS,iBAAiB;AAG9C,cAAY,QAAQ,CAAC,eAAe;AAChC,QAAI,CAAC,WAAW,UAAU,SAAS,WAAW;AAC1C,iBAAW,UAAU,IAAI;AAAA;AAAA;AAKjC,QAAM,uBAAuB,SAAS,eAAe,oBAAoB;AACzE,MAAI,sBAAsB;AACtB,yBAAqB,UAAU,OAAO;AAAA;AAI1C,mBAAiB;AAAA;AAGrB,MAAM,2BAA2B,MAAM;AACnC,QAAM,aAAa,SAAS,iBAAiB;AAE7C,aAAW,QAAQ,CAAC,YAAY;AAC5B,YAAQ,iBAAiB,UAAU;AAAA;AAAA;AAI3C,MAAM,qBAAqB,MAAM;AAC7B,QAAM,sBAAsB,SAAS,cAAc;AAEnD,MAAI,qBAAqB;AACrB,UAAM,QAAQ,SAAS,oBAAoB;AAC3C,qBAAiB;AAAA;AAAA;AAIzB,SAAS,iBAAiB,oBAAoB,MAAM;AAChD;AACA,SAAO,iBAAiB,UAAU;AAClC;AAAA;",
  "names": []
}
