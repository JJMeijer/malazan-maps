{
  "version": 3,
  "sources": ["../../../src/ts/search/element-helpers.ts", "../../../node_modules/fuse.js/dist/fuse.esm.js", "../../../src/ts/search/fuse-search.ts", "../../../src/ts/search/search-handlers.ts", "../../../src/ts/search.ts"],
  "sourcesContent": ["import { Entry, FocusResultInformation } from '../types';\nimport Fuse from 'fuse.js';\n\nconst RESULT_INDEX_ATTRIBUTE = 'index';\nconst RESULT_NAME_ATTRIBUTE = 'name';\nconst RESULT_HREF_ATTRIBUTE = 'href';\n\nexport const getSearchResultsElement = (): HTMLElement => {\n    const searchResultsElement = document.getElementById('search-results');\n\n    if (!(searchResultsElement instanceof HTMLElement)) {\n        throw new Error('searchResultsElement is unexpectedly missing');\n    }\n\n    return searchResultsElement;\n};\n\nexport const getSearchWrapperElement = (): HTMLElement => {\n    const searchWrapperElement = document.getElementById('search-wrapper');\n\n    if (!(searchWrapperElement instanceof HTMLElement)) {\n        throw new Error('searchWrapperElement is unexpectedly missing');\n    }\n\n    return searchWrapperElement;\n};\n\nexport const getSearchInputElement = (): HTMLInputElement => {\n    const searchInputElement = document.getElementById('search');\n\n    if (!(searchInputElement instanceof HTMLInputElement)) {\n        throw new Error('searchInputElement is unexpectedly missing');\n    }\n\n    return searchInputElement;\n};\n\nconst boldMatchingIndices = (name: string, indices: readonly Fuse.RangeTuple[]): string => {\n    let result = '';\n    let position = 0;\n    indices.forEach(([from, to], index) => {\n        result += name.substring(position, from);\n        position = to + 1;\n\n        const replaceTarget = name.substring(from, to + 1);\n        const replacement = `<span class=\"search-result-higlight\">${replaceTarget}</span>`;\n\n        result += replacement;\n\n        if (index === indices.length - 1) {\n            result += name.substring(to + 1, name.length);\n        }\n    });\n\n    return result;\n};\n\nexport const createSearchResult = (\n    item: Entry,\n    indices: readonly Fuse.RangeTuple[],\n    index: number,\n): HTMLElement => {\n    const { name, slug, type } = item;\n    const resultHref = `/${type}/${slug}/`;\n\n    const resultWrapper = document.createElement('div');\n    resultWrapper.classList.add('search-result-wrapper');\n    resultWrapper.setAttribute(`data-${RESULT_INDEX_ATTRIBUTE}`, String(index));\n    resultWrapper.setAttribute(`data-${RESULT_NAME_ATTRIBUTE}`, slug);\n    resultWrapper.setAttribute(`data-${RESULT_HREF_ATTRIBUTE}`, resultHref);\n\n    const resultLink = document.createElement('a');\n    resultLink.href = resultHref;\n    resultLink.classList.add('search-result-link');\n\n    const resultName = document.createElement('p');\n    resultName.innerHTML = boldMatchingIndices(name, indices);\n    resultName.classList.add('search-result-name');\n\n    const resultType = document.createElement('p');\n    resultType.innerHTML = type;\n    resultType.classList.add('search-result-type');\n\n    resultLink.appendChild(resultName);\n    resultLink.appendChild(resultType);\n    resultWrapper.appendChild(resultLink);\n\n    return resultWrapper;\n};\n\nexport const createNoResult = (): HTMLElement => {\n    const wrapper = document.createElement('div');\n    wrapper.classList.add('search-result-wrapper-noresult');\n\n    const text = document.createElement('p');\n    text.innerHTML = 'No Results';\n\n    wrapper.appendChild(text);\n\n    return wrapper;\n};\n\nexport const getCurrentFocusResult = (): FocusResultInformation => {\n    const element = document.querySelector('.focus-result');\n\n    if (element instanceof HTMLElement) {\n        const focusIndex = element.dataset[RESULT_INDEX_ATTRIBUTE];\n        const focusName = element.dataset[RESULT_NAME_ATTRIBUTE];\n        const focusHref = element.dataset[RESULT_HREF_ATTRIBUTE];\n\n        if (focusName && focusIndex && focusHref) {\n            return {\n                focusName,\n                focusIndex: parseInt(focusIndex),\n                focusHref,\n            };\n        }\n\n        throw new Error('Focussed Result had unexpected format');\n    }\n\n    return {\n        focusName: '',\n        focusIndex: 0,\n        focusHref: '',\n    };\n};\n\nconst FOCUS_CLASSES = ['focus-result', 'search-result-focussed'];\n\nexport const unSetFocusResult = (resultIndex: number): void => {\n    const element = document.querySelector(`[data-index=\"${resultIndex}\"]`);\n\n    if (element !== null) {\n        element.classList.remove(...FOCUS_CLASSES);\n    }\n};\n\nexport const setFocusResult = (resultIndex: number): void => {\n    const element = document.querySelector(`[data-index=\"${resultIndex}\"]`);\n\n    if (element !== null) {\n        element.classList.add(...FOCUS_CLASSES);\n    }\n};\n", "/**\n * Fuse.js v6.4.6 - Lightweight fuzzy-search (http://fusejs.io)\n *\n * Copyright (c) 2021 Kiro Risk (http://kiro.me)\n * All Rights Reserved. Apache Software License 2.0\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n */\n\nfunction isArray(value) {\n  return !Array.isArray\n    ? getTag(value) === '[object Array]'\n    : Array.isArray(value)\n}\n\n// Adapted from: https://github.com/lodash/lodash/blob/master/.internal/baseToString.js\nconst INFINITY = 1 / 0;\nfunction baseToString(value) {\n  // Exit early for strings to avoid a performance hit in some environments.\n  if (typeof value == 'string') {\n    return value\n  }\n  let result = value + '';\n  return result == '0' && 1 / value == -INFINITY ? '-0' : result\n}\n\nfunction toString(value) {\n  return value == null ? '' : baseToString(value)\n}\n\nfunction isString(value) {\n  return typeof value === 'string'\n}\n\nfunction isNumber(value) {\n  return typeof value === 'number'\n}\n\n// Adapted from: https://github.com/lodash/lodash/blob/master/isBoolean.js\nfunction isBoolean(value) {\n  return (\n    value === true ||\n    value === false ||\n    (isObjectLike(value) && getTag(value) == '[object Boolean]')\n  )\n}\n\nfunction isObject(value) {\n  return typeof value === 'object'\n}\n\n// Checks if `value` is object-like.\nfunction isObjectLike(value) {\n  return isObject(value) && value !== null\n}\n\nfunction isDefined(value) {\n  return value !== undefined && value !== null\n}\n\nfunction isBlank(value) {\n  return !value.trim().length\n}\n\n// Gets the `toStringTag` of `value`.\n// Adapted from: https://github.com/lodash/lodash/blob/master/.internal/getTag.js\nfunction getTag(value) {\n  return value == null\n    ? value === undefined\n      ? '[object Undefined]'\n      : '[object Null]'\n    : Object.prototype.toString.call(value)\n}\n\nconst EXTENDED_SEARCH_UNAVAILABLE = 'Extended search is not available';\n\nconst INCORRECT_INDEX_TYPE = \"Incorrect 'index' type\";\n\nconst LOGICAL_SEARCH_INVALID_QUERY_FOR_KEY = (key) =>\n  `Invalid value for key ${key}`;\n\nconst PATTERN_LENGTH_TOO_LARGE = (max) =>\n  `Pattern length exceeds max of ${max}.`;\n\nconst MISSING_KEY_PROPERTY = (name) => `Missing ${name} property in key`;\n\nconst INVALID_KEY_WEIGHT_VALUE = (key) =>\n  `Property 'weight' in key '${key}' must be a positive integer`;\n\nconst hasOwn = Object.prototype.hasOwnProperty;\n\nclass KeyStore {\n  constructor(keys) {\n    this._keys = [];\n    this._keyMap = {};\n\n    let totalWeight = 0;\n\n    keys.forEach((key) => {\n      let obj = createKey(key);\n\n      totalWeight += obj.weight;\n\n      this._keys.push(obj);\n      this._keyMap[obj.id] = obj;\n\n      totalWeight += obj.weight;\n    });\n\n    // Normalize weights so that their sum is equal to 1\n    this._keys.forEach((key) => {\n      key.weight /= totalWeight;\n    });\n  }\n  get(keyId) {\n    return this._keyMap[keyId]\n  }\n  keys() {\n    return this._keys\n  }\n  toJSON() {\n    return JSON.stringify(this._keys)\n  }\n}\n\nfunction createKey(key) {\n  let path = null;\n  let id = null;\n  let src = null;\n  let weight = 1;\n\n  if (isString(key) || isArray(key)) {\n    src = key;\n    path = createKeyPath(key);\n    id = createKeyId(key);\n  } else {\n    if (!hasOwn.call(key, 'name')) {\n      throw new Error(MISSING_KEY_PROPERTY('name'))\n    }\n\n    const name = key.name;\n    src = name;\n\n    if (hasOwn.call(key, 'weight')) {\n      weight = key.weight;\n\n      if (weight <= 0) {\n        throw new Error(INVALID_KEY_WEIGHT_VALUE(name))\n      }\n    }\n\n    path = createKeyPath(name);\n    id = createKeyId(name);\n  }\n\n  return { path, id, weight, src }\n}\n\nfunction createKeyPath(key) {\n  return isArray(key) ? key : key.split('.')\n}\n\nfunction createKeyId(key) {\n  return isArray(key) ? key.join('.') : key\n}\n\nfunction get(obj, path) {\n  let list = [];\n  let arr = false;\n\n  const deepGet = (obj, path, index) => {\n    if (!isDefined(obj)) {\n      return\n    }\n    if (!path[index]) {\n      // If there's no path left, we've arrived at the object we care about.\n      list.push(obj);\n    } else {\n      let key = path[index];\n\n      const value = obj[key];\n\n      if (!isDefined(value)) {\n        return\n      }\n\n      // If we're at the last value in the path, and if it's a string/number/bool,\n      // add it to the list\n      if (\n        index === path.length - 1 &&\n        (isString(value) || isNumber(value) || isBoolean(value))\n      ) {\n        list.push(toString(value));\n      } else if (isArray(value)) {\n        arr = true;\n        // Search each item in the array.\n        for (let i = 0, len = value.length; i < len; i += 1) {\n          deepGet(value[i], path, index + 1);\n        }\n      } else if (path.length) {\n        // An object. Recurse further.\n        deepGet(value, path, index + 1);\n      }\n    }\n  };\n\n  // Backwards compatibility (since path used to be a string)\n  deepGet(obj, isString(path) ? path.split('.') : path, 0);\n\n  return arr ? list : list[0]\n}\n\nconst MatchOptions = {\n  // Whether the matches should be included in the result set. When `true`, each record in the result\n  // set will include the indices of the matched characters.\n  // These can consequently be used for highlighting purposes.\n  includeMatches: false,\n  // When `true`, the matching function will continue to the end of a search pattern even if\n  // a perfect match has already been located in the string.\n  findAllMatches: false,\n  // Minimum number of characters that must be matched before a result is considered a match\n  minMatchCharLength: 1\n};\n\nconst BasicOptions = {\n  // When `true`, the algorithm continues searching to the end of the input even if a perfect\n  // match is found before the end of the same input.\n  isCaseSensitive: false,\n  // When true, the matching function will continue to the end of a search pattern even if\n  includeScore: false,\n  // List of properties that will be searched. This also supports nested properties.\n  keys: [],\n  // Whether to sort the result list, by score\n  shouldSort: true,\n  // Default sort function: sort by ascending score, ascending index\n  sortFn: (a, b) =>\n    a.score === b.score ? (a.idx < b.idx ? -1 : 1) : a.score < b.score ? -1 : 1\n};\n\nconst FuzzyOptions = {\n  // Approximately where in the text is the pattern expected to be found?\n  location: 0,\n  // At what point does the match algorithm give up. A threshold of '0.0' requires a perfect match\n  // (of both letters and location), a threshold of '1.0' would match anything.\n  threshold: 0.6,\n  // Determines how close the match must be to the fuzzy location (specified above).\n  // An exact letter match which is 'distance' characters away from the fuzzy location\n  // would score as a complete mismatch. A distance of '0' requires the match be at\n  // the exact location specified, a threshold of '1000' would require a perfect match\n  // to be within 800 characters of the fuzzy location to be found using a 0.8 threshold.\n  distance: 100\n};\n\nconst AdvancedOptions = {\n  // When `true`, it enables the use of unix-like search commands\n  useExtendedSearch: false,\n  // The get function to use when fetching an object's properties.\n  // The default will search nested paths *ie foo.bar.baz*\n  getFn: get,\n  // When `true`, search will ignore `location` and `distance`, so it won't matter\n  // where in the string the pattern appears.\n  // More info: https://fusejs.io/concepts/scoring-theory.html#fuzziness-score\n  ignoreLocation: false,\n  // When `true`, the calculation for the relevance score (used for sorting) will\n  // ignore the field-length norm.\n  // More info: https://fusejs.io/concepts/scoring-theory.html#field-length-norm\n  ignoreFieldNorm: false\n};\n\nvar Config = {\n  ...BasicOptions,\n  ...MatchOptions,\n  ...FuzzyOptions,\n  ...AdvancedOptions\n};\n\nconst SPACE = /[^ ]+/g;\n\n// Field-length norm: the shorter the field, the higher the weight.\n// Set to 3 decimals to reduce index size.\nfunction norm(mantissa = 3) {\n  const cache = new Map();\n  const m = Math.pow(10, mantissa);\n\n  return {\n    get(value) {\n      const numTokens = value.match(SPACE).length;\n\n      if (cache.has(numTokens)) {\n        return cache.get(numTokens)\n      }\n\n      const norm = 1 / Math.sqrt(numTokens);\n\n      // In place of `toFixed(mantissa)`, for faster computation\n      const n = parseFloat(Math.round(norm * m) / m);\n\n      cache.set(numTokens, n);\n\n      return n\n    },\n    clear() {\n      cache.clear();\n    }\n  }\n}\n\nclass FuseIndex {\n  constructor({ getFn = Config.getFn } = {}) {\n    this.norm = norm(3);\n    this.getFn = getFn;\n    this.isCreated = false;\n\n    this.setIndexRecords();\n  }\n  setSources(docs = []) {\n    this.docs = docs;\n  }\n  setIndexRecords(records = []) {\n    this.records = records;\n  }\n  setKeys(keys = []) {\n    this.keys = keys;\n    this._keysMap = {};\n    keys.forEach((key, idx) => {\n      this._keysMap[key.id] = idx;\n    });\n  }\n  create() {\n    if (this.isCreated || !this.docs.length) {\n      return\n    }\n\n    this.isCreated = true;\n\n    // List is Array<String>\n    if (isString(this.docs[0])) {\n      this.docs.forEach((doc, docIndex) => {\n        this._addString(doc, docIndex);\n      });\n    } else {\n      // List is Array<Object>\n      this.docs.forEach((doc, docIndex) => {\n        this._addObject(doc, docIndex);\n      });\n    }\n\n    this.norm.clear();\n  }\n  // Adds a doc to the end of the index\n  add(doc) {\n    const idx = this.size();\n\n    if (isString(doc)) {\n      this._addString(doc, idx);\n    } else {\n      this._addObject(doc, idx);\n    }\n  }\n  // Removes the doc at the specified index of the index\n  removeAt(idx) {\n    this.records.splice(idx, 1);\n\n    // Change ref index of every subsquent doc\n    for (let i = idx, len = this.size(); i < len; i += 1) {\n      this.records[i].i -= 1;\n    }\n  }\n  getValueForItemAtKeyId(item, keyId) {\n    return item[this._keysMap[keyId]]\n  }\n  size() {\n    return this.records.length\n  }\n  _addString(doc, docIndex) {\n    if (!isDefined(doc) || isBlank(doc)) {\n      return\n    }\n\n    let record = {\n      v: doc,\n      i: docIndex,\n      n: this.norm.get(doc)\n    };\n\n    this.records.push(record);\n  }\n  _addObject(doc, docIndex) {\n    let record = { i: docIndex, $: {} };\n\n    // Iterate over every key (i.e, path), and fetch the value at that key\n    this.keys.forEach((key, keyIndex) => {\n      // console.log(key)\n      let value = this.getFn(doc, key.path);\n\n      if (!isDefined(value)) {\n        return\n      }\n\n      if (isArray(value)) {\n        let subRecords = [];\n        const stack = [{ nestedArrIndex: -1, value }];\n\n        while (stack.length) {\n          const { nestedArrIndex, value } = stack.pop();\n\n          if (!isDefined(value)) {\n            continue\n          }\n\n          if (isString(value) && !isBlank(value)) {\n            let subRecord = {\n              v: value,\n              i: nestedArrIndex,\n              n: this.norm.get(value)\n            };\n\n            subRecords.push(subRecord);\n          } else if (isArray(value)) {\n            value.forEach((item, k) => {\n              stack.push({\n                nestedArrIndex: k,\n                value: item\n              });\n            });\n          }\n        }\n        record.$[keyIndex] = subRecords;\n      } else if (!isBlank(value)) {\n        let subRecord = {\n          v: value,\n          n: this.norm.get(value)\n        };\n\n        record.$[keyIndex] = subRecord;\n      }\n    });\n\n    this.records.push(record);\n  }\n  toJSON() {\n    return {\n      keys: this.keys,\n      records: this.records\n    }\n  }\n}\n\nfunction createIndex(keys, docs, { getFn = Config.getFn } = {}) {\n  const myIndex = new FuseIndex({ getFn });\n  myIndex.setKeys(keys.map(createKey));\n  myIndex.setSources(docs);\n  myIndex.create();\n  return myIndex\n}\n\nfunction parseIndex(data, { getFn = Config.getFn } = {}) {\n  const { keys, records } = data;\n  const myIndex = new FuseIndex({ getFn });\n  myIndex.setKeys(keys);\n  myIndex.setIndexRecords(records);\n  return myIndex\n}\n\nfunction computeScore(\n  pattern,\n  {\n    errors = 0,\n    currentLocation = 0,\n    expectedLocation = 0,\n    distance = Config.distance,\n    ignoreLocation = Config.ignoreLocation\n  } = {}\n) {\n  const accuracy = errors / pattern.length;\n\n  if (ignoreLocation) {\n    return accuracy\n  }\n\n  const proximity = Math.abs(expectedLocation - currentLocation);\n\n  if (!distance) {\n    // Dodge divide by zero error.\n    return proximity ? 1.0 : accuracy\n  }\n\n  return accuracy + proximity / distance\n}\n\nfunction convertMaskToIndices(\n  matchmask = [],\n  minMatchCharLength = Config.minMatchCharLength\n) {\n  let indices = [];\n  let start = -1;\n  let end = -1;\n  let i = 0;\n\n  for (let len = matchmask.length; i < len; i += 1) {\n    let match = matchmask[i];\n    if (match && start === -1) {\n      start = i;\n    } else if (!match && start !== -1) {\n      end = i - 1;\n      if (end - start + 1 >= minMatchCharLength) {\n        indices.push([start, end]);\n      }\n      start = -1;\n    }\n  }\n\n  // (i-1 - start) + 1 => i - start\n  if (matchmask[i - 1] && i - start >= minMatchCharLength) {\n    indices.push([start, i - 1]);\n  }\n\n  return indices\n}\n\n// Machine word size\nconst MAX_BITS = 32;\n\nfunction search(\n  text,\n  pattern,\n  patternAlphabet,\n  {\n    location = Config.location,\n    distance = Config.distance,\n    threshold = Config.threshold,\n    findAllMatches = Config.findAllMatches,\n    minMatchCharLength = Config.minMatchCharLength,\n    includeMatches = Config.includeMatches,\n    ignoreLocation = Config.ignoreLocation\n  } = {}\n) {\n  if (pattern.length > MAX_BITS) {\n    throw new Error(PATTERN_LENGTH_TOO_LARGE(MAX_BITS))\n  }\n\n  const patternLen = pattern.length;\n  // Set starting location at beginning text and initialize the alphabet.\n  const textLen = text.length;\n  // Handle the case when location > text.length\n  const expectedLocation = Math.max(0, Math.min(location, textLen));\n  // Highest score beyond which we give up.\n  let currentThreshold = threshold;\n  // Is there a nearby exact match? (speedup)\n  let bestLocation = expectedLocation;\n\n  // Performance: only computer matches when the minMatchCharLength > 1\n  // OR if `includeMatches` is true.\n  const computeMatches = minMatchCharLength > 1 || includeMatches;\n  // A mask of the matches, used for building the indices\n  const matchMask = computeMatches ? Array(textLen) : [];\n\n  let index;\n\n  // Get all exact matches, here for speed up\n  while ((index = text.indexOf(pattern, bestLocation)) > -1) {\n    let score = computeScore(pattern, {\n      currentLocation: index,\n      expectedLocation,\n      distance,\n      ignoreLocation\n    });\n\n    currentThreshold = Math.min(score, currentThreshold);\n    bestLocation = index + patternLen;\n\n    if (computeMatches) {\n      let i = 0;\n      while (i < patternLen) {\n        matchMask[index + i] = 1;\n        i += 1;\n      }\n    }\n  }\n\n  // Reset the best location\n  bestLocation = -1;\n\n  let lastBitArr = [];\n  let finalScore = 1;\n  let binMax = patternLen + textLen;\n\n  const mask = 1 << (patternLen - 1);\n\n  for (let i = 0; i < patternLen; i += 1) {\n    // Scan for the best match; each iteration allows for one more error.\n    // Run a binary search to determine how far from the match location we can stray\n    // at this error level.\n    let binMin = 0;\n    let binMid = binMax;\n\n    while (binMin < binMid) {\n      const score = computeScore(pattern, {\n        errors: i,\n        currentLocation: expectedLocation + binMid,\n        expectedLocation,\n        distance,\n        ignoreLocation\n      });\n\n      if (score <= currentThreshold) {\n        binMin = binMid;\n      } else {\n        binMax = binMid;\n      }\n\n      binMid = Math.floor((binMax - binMin) / 2 + binMin);\n    }\n\n    // Use the result from this iteration as the maximum for the next.\n    binMax = binMid;\n\n    let start = Math.max(1, expectedLocation - binMid + 1);\n    let finish = findAllMatches\n      ? textLen\n      : Math.min(expectedLocation + binMid, textLen) + patternLen;\n\n    // Initialize the bit array\n    let bitArr = Array(finish + 2);\n\n    bitArr[finish + 1] = (1 << i) - 1;\n\n    for (let j = finish; j >= start; j -= 1) {\n      let currentLocation = j - 1;\n      let charMatch = patternAlphabet[text.charAt(currentLocation)];\n\n      if (computeMatches) {\n        // Speed up: quick bool to int conversion (i.e, `charMatch ? 1 : 0`)\n        matchMask[currentLocation] = +!!charMatch;\n      }\n\n      // First pass: exact match\n      bitArr[j] = ((bitArr[j + 1] << 1) | 1) & charMatch;\n\n      // Subsequent passes: fuzzy match\n      if (i) {\n        bitArr[j] |=\n          ((lastBitArr[j + 1] | lastBitArr[j]) << 1) | 1 | lastBitArr[j + 1];\n      }\n\n      if (bitArr[j] & mask) {\n        finalScore = computeScore(pattern, {\n          errors: i,\n          currentLocation,\n          expectedLocation,\n          distance,\n          ignoreLocation\n        });\n\n        // This match will almost certainly be better than any existing match.\n        // But check anyway.\n        if (finalScore <= currentThreshold) {\n          // Indeed it is\n          currentThreshold = finalScore;\n          bestLocation = currentLocation;\n\n          // Already passed `loc`, downhill from here on in.\n          if (bestLocation <= expectedLocation) {\n            break\n          }\n\n          // When passing `bestLocation`, don't exceed our current distance from `expectedLocation`.\n          start = Math.max(1, 2 * expectedLocation - bestLocation);\n        }\n      }\n    }\n\n    // No hope for a (better) match at greater error levels.\n    const score = computeScore(pattern, {\n      errors: i + 1,\n      currentLocation: expectedLocation,\n      expectedLocation,\n      distance,\n      ignoreLocation\n    });\n\n    if (score > currentThreshold) {\n      break\n    }\n\n    lastBitArr = bitArr;\n  }\n\n  const result = {\n    isMatch: bestLocation >= 0,\n    // Count exact matches (those with a score of 0) to be \"almost\" exact\n    score: Math.max(0.001, finalScore)\n  };\n\n  if (computeMatches) {\n    const indices = convertMaskToIndices(matchMask, minMatchCharLength);\n    if (!indices.length) {\n      result.isMatch = false;\n    } else if (includeMatches) {\n      result.indices = indices;\n    }\n  }\n\n  return result\n}\n\nfunction createPatternAlphabet(pattern) {\n  let mask = {};\n\n  for (let i = 0, len = pattern.length; i < len; i += 1) {\n    const char = pattern.charAt(i);\n    mask[char] = (mask[char] || 0) | (1 << (len - i - 1));\n  }\n\n  return mask\n}\n\nclass BitapSearch {\n  constructor(\n    pattern,\n    {\n      location = Config.location,\n      threshold = Config.threshold,\n      distance = Config.distance,\n      includeMatches = Config.includeMatches,\n      findAllMatches = Config.findAllMatches,\n      minMatchCharLength = Config.minMatchCharLength,\n      isCaseSensitive = Config.isCaseSensitive,\n      ignoreLocation = Config.ignoreLocation\n    } = {}\n  ) {\n    this.options = {\n      location,\n      threshold,\n      distance,\n      includeMatches,\n      findAllMatches,\n      minMatchCharLength,\n      isCaseSensitive,\n      ignoreLocation\n    };\n\n    this.pattern = isCaseSensitive ? pattern : pattern.toLowerCase();\n\n    this.chunks = [];\n\n    if (!this.pattern.length) {\n      return\n    }\n\n    const addChunk = (pattern, startIndex) => {\n      this.chunks.push({\n        pattern,\n        alphabet: createPatternAlphabet(pattern),\n        startIndex\n      });\n    };\n\n    const len = this.pattern.length;\n\n    if (len > MAX_BITS) {\n      let i = 0;\n      const remainder = len % MAX_BITS;\n      const end = len - remainder;\n\n      while (i < end) {\n        addChunk(this.pattern.substr(i, MAX_BITS), i);\n        i += MAX_BITS;\n      }\n\n      if (remainder) {\n        const startIndex = len - MAX_BITS;\n        addChunk(this.pattern.substr(startIndex), startIndex);\n      }\n    } else {\n      addChunk(this.pattern, 0);\n    }\n  }\n\n  searchIn(text) {\n    const { isCaseSensitive, includeMatches } = this.options;\n\n    if (!isCaseSensitive) {\n      text = text.toLowerCase();\n    }\n\n    // Exact match\n    if (this.pattern === text) {\n      let result = {\n        isMatch: true,\n        score: 0\n      };\n\n      if (includeMatches) {\n        result.indices = [[0, text.length - 1]];\n      }\n\n      return result\n    }\n\n    // Otherwise, use Bitap algorithm\n    const {\n      location,\n      distance,\n      threshold,\n      findAllMatches,\n      minMatchCharLength,\n      ignoreLocation\n    } = this.options;\n\n    let allIndices = [];\n    let totalScore = 0;\n    let hasMatches = false;\n\n    this.chunks.forEach(({ pattern, alphabet, startIndex }) => {\n      const { isMatch, score, indices } = search(text, pattern, alphabet, {\n        location: location + startIndex,\n        distance,\n        threshold,\n        findAllMatches,\n        minMatchCharLength,\n        includeMatches,\n        ignoreLocation\n      });\n\n      if (isMatch) {\n        hasMatches = true;\n      }\n\n      totalScore += score;\n\n      if (isMatch && indices) {\n        allIndices = [...allIndices, ...indices];\n      }\n    });\n\n    let result = {\n      isMatch: hasMatches,\n      score: hasMatches ? totalScore / this.chunks.length : 1\n    };\n\n    if (hasMatches && includeMatches) {\n      result.indices = allIndices;\n    }\n\n    return result\n  }\n}\n\nclass BaseMatch {\n  constructor(pattern) {\n    this.pattern = pattern;\n  }\n  static isMultiMatch(pattern) {\n    return getMatch(pattern, this.multiRegex)\n  }\n  static isSingleMatch(pattern) {\n    return getMatch(pattern, this.singleRegex)\n  }\n  search(/*text*/) {}\n}\n\nfunction getMatch(pattern, exp) {\n  const matches = pattern.match(exp);\n  return matches ? matches[1] : null\n}\n\n// Token: 'file\n\nclass ExactMatch extends BaseMatch {\n  constructor(pattern) {\n    super(pattern);\n  }\n  static get type() {\n    return 'exact'\n  }\n  static get multiRegex() {\n    return /^=\"(.*)\"$/\n  }\n  static get singleRegex() {\n    return /^=(.*)$/\n  }\n  search(text) {\n    const isMatch = text === this.pattern;\n\n    return {\n      isMatch,\n      score: isMatch ? 0 : 1,\n      indices: [0, this.pattern.length - 1]\n    }\n  }\n}\n\n// Token: !fire\n\nclass InverseExactMatch extends BaseMatch {\n  constructor(pattern) {\n    super(pattern);\n  }\n  static get type() {\n    return 'inverse-exact'\n  }\n  static get multiRegex() {\n    return /^!\"(.*)\"$/\n  }\n  static get singleRegex() {\n    return /^!(.*)$/\n  }\n  search(text) {\n    const index = text.indexOf(this.pattern);\n    const isMatch = index === -1;\n\n    return {\n      isMatch,\n      score: isMatch ? 0 : 1,\n      indices: [0, text.length - 1]\n    }\n  }\n}\n\n// Token: ^file\n\nclass PrefixExactMatch extends BaseMatch {\n  constructor(pattern) {\n    super(pattern);\n  }\n  static get type() {\n    return 'prefix-exact'\n  }\n  static get multiRegex() {\n    return /^\\^\"(.*)\"$/\n  }\n  static get singleRegex() {\n    return /^\\^(.*)$/\n  }\n  search(text) {\n    const isMatch = text.startsWith(this.pattern);\n\n    return {\n      isMatch,\n      score: isMatch ? 0 : 1,\n      indices: [0, this.pattern.length - 1]\n    }\n  }\n}\n\n// Token: !^fire\n\nclass InversePrefixExactMatch extends BaseMatch {\n  constructor(pattern) {\n    super(pattern);\n  }\n  static get type() {\n    return 'inverse-prefix-exact'\n  }\n  static get multiRegex() {\n    return /^!\\^\"(.*)\"$/\n  }\n  static get singleRegex() {\n    return /^!\\^(.*)$/\n  }\n  search(text) {\n    const isMatch = !text.startsWith(this.pattern);\n\n    return {\n      isMatch,\n      score: isMatch ? 0 : 1,\n      indices: [0, text.length - 1]\n    }\n  }\n}\n\n// Token: .file$\n\nclass SuffixExactMatch extends BaseMatch {\n  constructor(pattern) {\n    super(pattern);\n  }\n  static get type() {\n    return 'suffix-exact'\n  }\n  static get multiRegex() {\n    return /^\"(.*)\"\\$$/\n  }\n  static get singleRegex() {\n    return /^(.*)\\$$/\n  }\n  search(text) {\n    const isMatch = text.endsWith(this.pattern);\n\n    return {\n      isMatch,\n      score: isMatch ? 0 : 1,\n      indices: [text.length - this.pattern.length, text.length - 1]\n    }\n  }\n}\n\n// Token: !.file$\n\nclass InverseSuffixExactMatch extends BaseMatch {\n  constructor(pattern) {\n    super(pattern);\n  }\n  static get type() {\n    return 'inverse-suffix-exact'\n  }\n  static get multiRegex() {\n    return /^!\"(.*)\"\\$$/\n  }\n  static get singleRegex() {\n    return /^!(.*)\\$$/\n  }\n  search(text) {\n    const isMatch = !text.endsWith(this.pattern);\n    return {\n      isMatch,\n      score: isMatch ? 0 : 1,\n      indices: [0, text.length - 1]\n    }\n  }\n}\n\nclass FuzzyMatch extends BaseMatch {\n  constructor(\n    pattern,\n    {\n      location = Config.location,\n      threshold = Config.threshold,\n      distance = Config.distance,\n      includeMatches = Config.includeMatches,\n      findAllMatches = Config.findAllMatches,\n      minMatchCharLength = Config.minMatchCharLength,\n      isCaseSensitive = Config.isCaseSensitive,\n      ignoreLocation = Config.ignoreLocation\n    } = {}\n  ) {\n    super(pattern);\n    this._bitapSearch = new BitapSearch(pattern, {\n      location,\n      threshold,\n      distance,\n      includeMatches,\n      findAllMatches,\n      minMatchCharLength,\n      isCaseSensitive,\n      ignoreLocation\n    });\n  }\n  static get type() {\n    return 'fuzzy'\n  }\n  static get multiRegex() {\n    return /^\"(.*)\"$/\n  }\n  static get singleRegex() {\n    return /^(.*)$/\n  }\n  search(text) {\n    return this._bitapSearch.searchIn(text)\n  }\n}\n\n// Token: 'file\n\nclass IncludeMatch extends BaseMatch {\n  constructor(pattern) {\n    super(pattern);\n  }\n  static get type() {\n    return 'include'\n  }\n  static get multiRegex() {\n    return /^'\"(.*)\"$/\n  }\n  static get singleRegex() {\n    return /^'(.*)$/\n  }\n  search(text) {\n    let location = 0;\n    let index;\n\n    const indices = [];\n    const patternLen = this.pattern.length;\n\n    // Get all exact matches\n    while ((index = text.indexOf(this.pattern, location)) > -1) {\n      location = index + patternLen;\n      indices.push([index, location - 1]);\n    }\n\n    const isMatch = !!indices.length;\n\n    return {\n      isMatch,\n      score: isMatch ? 0 : 1,\n      indices\n    }\n  }\n}\n\n// \u2757Order is important. DO NOT CHANGE.\nconst searchers = [\n  ExactMatch,\n  IncludeMatch,\n  PrefixExactMatch,\n  InversePrefixExactMatch,\n  InverseSuffixExactMatch,\n  SuffixExactMatch,\n  InverseExactMatch,\n  FuzzyMatch\n];\n\nconst searchersLen = searchers.length;\n\n// Regex to split by spaces, but keep anything in quotes together\nconst SPACE_RE = / +(?=([^\\\"]*\\\"[^\\\"]*\\\")*[^\\\"]*$)/;\nconst OR_TOKEN = '|';\n\n// Return a 2D array representation of the query, for simpler parsing.\n// Example:\n// \"^core go$ | rb$ | py$ xy$\" => [[\"^core\", \"go$\"], [\"rb$\"], [\"py$\", \"xy$\"]]\nfunction parseQuery(pattern, options = {}) {\n  return pattern.split(OR_TOKEN).map((item) => {\n    let query = item\n      .trim()\n      .split(SPACE_RE)\n      .filter((item) => item && !!item.trim());\n\n    let results = [];\n    for (let i = 0, len = query.length; i < len; i += 1) {\n      const queryItem = query[i];\n\n      // 1. Handle multiple query match (i.e, once that are quoted, like `\"hello world\"`)\n      let found = false;\n      let idx = -1;\n      while (!found && ++idx < searchersLen) {\n        const searcher = searchers[idx];\n        let token = searcher.isMultiMatch(queryItem);\n        if (token) {\n          results.push(new searcher(token, options));\n          found = true;\n        }\n      }\n\n      if (found) {\n        continue\n      }\n\n      // 2. Handle single query matches (i.e, once that are *not* quoted)\n      idx = -1;\n      while (++idx < searchersLen) {\n        const searcher = searchers[idx];\n        let token = searcher.isSingleMatch(queryItem);\n        if (token) {\n          results.push(new searcher(token, options));\n          break\n        }\n      }\n    }\n\n    return results\n  })\n}\n\n// These extended matchers can return an array of matches, as opposed\n// to a singl match\nconst MultiMatchSet = new Set([FuzzyMatch.type, IncludeMatch.type]);\n\n/**\n * Command-like searching\n * ======================\n *\n * Given multiple search terms delimited by spaces.e.g. `^jscript .python$ ruby !java`,\n * search in a given text.\n *\n * Search syntax:\n *\n * | Token       | Match type                 | Description                            |\n * | ----------- | -------------------------- | -------------------------------------- |\n * | `jscript`   | fuzzy-match                | Items that fuzzy match `jscript`       |\n * | `=scheme`   | exact-match                | Items that are `scheme`                |\n * | `'python`   | include-match              | Items that include `python`            |\n * | `!ruby`     | inverse-exact-match        | Items that do not include `ruby`       |\n * | `^java`     | prefix-exact-match         | Items that start with `java`           |\n * | `!^earlang` | inverse-prefix-exact-match | Items that do not start with `earlang` |\n * | `.js$`      | suffix-exact-match         | Items that end with `.js`              |\n * | `!.go$`     | inverse-suffix-exact-match | Items that do not end with `.go`       |\n *\n * A single pipe character acts as an OR operator. For example, the following\n * query matches entries that start with `core` and end with either`go`, `rb`,\n * or`py`.\n *\n * ```\n * ^core go$ | rb$ | py$\n * ```\n */\nclass ExtendedSearch {\n  constructor(\n    pattern,\n    {\n      isCaseSensitive = Config.isCaseSensitive,\n      includeMatches = Config.includeMatches,\n      minMatchCharLength = Config.minMatchCharLength,\n      ignoreLocation = Config.ignoreLocation,\n      findAllMatches = Config.findAllMatches,\n      location = Config.location,\n      threshold = Config.threshold,\n      distance = Config.distance\n    } = {}\n  ) {\n    this.query = null;\n    this.options = {\n      isCaseSensitive,\n      includeMatches,\n      minMatchCharLength,\n      findAllMatches,\n      ignoreLocation,\n      location,\n      threshold,\n      distance\n    };\n\n    this.pattern = isCaseSensitive ? pattern : pattern.toLowerCase();\n    this.query = parseQuery(this.pattern, this.options);\n  }\n\n  static condition(_, options) {\n    return options.useExtendedSearch\n  }\n\n  searchIn(text) {\n    const query = this.query;\n\n    if (!query) {\n      return {\n        isMatch: false,\n        score: 1\n      }\n    }\n\n    const { includeMatches, isCaseSensitive } = this.options;\n\n    text = isCaseSensitive ? text : text.toLowerCase();\n\n    let numMatches = 0;\n    let allIndices = [];\n    let totalScore = 0;\n\n    // ORs\n    for (let i = 0, qLen = query.length; i < qLen; i += 1) {\n      const searchers = query[i];\n\n      // Reset indices\n      allIndices.length = 0;\n      numMatches = 0;\n\n      // ANDs\n      for (let j = 0, pLen = searchers.length; j < pLen; j += 1) {\n        const searcher = searchers[j];\n        const { isMatch, indices, score } = searcher.search(text);\n\n        if (isMatch) {\n          numMatches += 1;\n          totalScore += score;\n          if (includeMatches) {\n            const type = searcher.constructor.type;\n            if (MultiMatchSet.has(type)) {\n              allIndices = [...allIndices, ...indices];\n            } else {\n              allIndices.push(indices);\n            }\n          }\n        } else {\n          totalScore = 0;\n          numMatches = 0;\n          allIndices.length = 0;\n          break\n        }\n      }\n\n      // OR condition, so if TRUE, return\n      if (numMatches) {\n        let result = {\n          isMatch: true,\n          score: totalScore / numMatches\n        };\n\n        if (includeMatches) {\n          result.indices = allIndices;\n        }\n\n        return result\n      }\n    }\n\n    // Nothing was matched\n    return {\n      isMatch: false,\n      score: 1\n    }\n  }\n}\n\nconst registeredSearchers = [];\n\nfunction register(...args) {\n  registeredSearchers.push(...args);\n}\n\nfunction createSearcher(pattern, options) {\n  for (let i = 0, len = registeredSearchers.length; i < len; i += 1) {\n    let searcherClass = registeredSearchers[i];\n    if (searcherClass.condition(pattern, options)) {\n      return new searcherClass(pattern, options)\n    }\n  }\n\n  return new BitapSearch(pattern, options)\n}\n\nconst LogicalOperator = {\n  AND: '$and',\n  OR: '$or'\n};\n\nconst KeyType = {\n  PATH: '$path',\n  PATTERN: '$val'\n};\n\nconst isExpression = (query) =>\n  !!(query[LogicalOperator.AND] || query[LogicalOperator.OR]);\n\nconst isPath = (query) => !!query[KeyType.PATH];\n\nconst isLeaf = (query) =>\n  !isArray(query) && isObject(query) && !isExpression(query);\n\nconst convertToExplicit = (query) => ({\n  [LogicalOperator.AND]: Object.keys(query).map((key) => ({\n    [key]: query[key]\n  }))\n});\n\n// When `auto` is `true`, the parse function will infer and initialize and add\n// the appropriate `Searcher` instance\nfunction parse(query, options, { auto = true } = {}) {\n  const next = (query) => {\n    let keys = Object.keys(query);\n\n    const isQueryPath = isPath(query);\n\n    if (!isQueryPath && keys.length > 1 && !isExpression(query)) {\n      return next(convertToExplicit(query))\n    }\n\n    if (isLeaf(query)) {\n      const key = isQueryPath ? query[KeyType.PATH] : keys[0];\n\n      const pattern = isQueryPath ? query[KeyType.PATTERN] : query[key];\n\n      if (!isString(pattern)) {\n        throw new Error(LOGICAL_SEARCH_INVALID_QUERY_FOR_KEY(key))\n      }\n\n      const obj = {\n        keyId: createKeyId(key),\n        pattern\n      };\n\n      if (auto) {\n        obj.searcher = createSearcher(pattern, options);\n      }\n\n      return obj\n    }\n\n    let node = {\n      children: [],\n      operator: keys[0]\n    };\n\n    keys.forEach((key) => {\n      const value = query[key];\n\n      if (isArray(value)) {\n        value.forEach((item) => {\n          node.children.push(next(item));\n        });\n      }\n    });\n\n    return node\n  };\n\n  if (!isExpression(query)) {\n    query = convertToExplicit(query);\n  }\n\n  return next(query)\n}\n\n// Practical scoring function\nfunction computeScore$1(\n  results,\n  { ignoreFieldNorm = Config.ignoreFieldNorm }\n) {\n  results.forEach((result) => {\n    let totalScore = 1;\n\n    result.matches.forEach(({ key, norm, score }) => {\n      const weight = key ? key.weight : null;\n\n      totalScore *= Math.pow(\n        score === 0 && weight ? Number.EPSILON : score,\n        (weight || 1) * (ignoreFieldNorm ? 1 : norm)\n      );\n    });\n\n    result.score = totalScore;\n  });\n}\n\nfunction transformMatches(result, data) {\n  const matches = result.matches;\n  data.matches = [];\n\n  if (!isDefined(matches)) {\n    return\n  }\n\n  matches.forEach((match) => {\n    if (!isDefined(match.indices) || !match.indices.length) {\n      return\n    }\n\n    const { indices, value } = match;\n\n    let obj = {\n      indices,\n      value\n    };\n\n    if (match.key) {\n      obj.key = match.key.src;\n    }\n\n    if (match.idx > -1) {\n      obj.refIndex = match.idx;\n    }\n\n    data.matches.push(obj);\n  });\n}\n\nfunction transformScore(result, data) {\n  data.score = result.score;\n}\n\nfunction format(\n  results,\n  docs,\n  {\n    includeMatches = Config.includeMatches,\n    includeScore = Config.includeScore\n  } = {}\n) {\n  const transformers = [];\n\n  if (includeMatches) transformers.push(transformMatches);\n  if (includeScore) transformers.push(transformScore);\n\n  return results.map((result) => {\n    const { idx } = result;\n\n    const data = {\n      item: docs[idx],\n      refIndex: idx\n    };\n\n    if (transformers.length) {\n      transformers.forEach((transformer) => {\n        transformer(result, data);\n      });\n    }\n\n    return data\n  })\n}\n\nclass Fuse {\n  constructor(docs, options = {}, index) {\n    this.options = { ...Config, ...options };\n\n    if (\n      this.options.useExtendedSearch &&\n      !true\n    ) {\n      throw new Error(EXTENDED_SEARCH_UNAVAILABLE)\n    }\n\n    this._keyStore = new KeyStore(this.options.keys);\n\n    this.setCollection(docs, index);\n  }\n\n  setCollection(docs, index) {\n    this._docs = docs;\n\n    if (index && !(index instanceof FuseIndex)) {\n      throw new Error(INCORRECT_INDEX_TYPE)\n    }\n\n    this._myIndex =\n      index ||\n      createIndex(this.options.keys, this._docs, {\n        getFn: this.options.getFn\n      });\n  }\n\n  add(doc) {\n    if (!isDefined(doc)) {\n      return\n    }\n\n    this._docs.push(doc);\n    this._myIndex.add(doc);\n  }\n\n  remove(predicate = (/* doc, idx */) => false) {\n    const results = [];\n\n    for (let i = 0, len = this._docs.length; i < len; i += 1) {\n      const doc = this._docs[i];\n      if (predicate(doc, i)) {\n        this.removeAt(i);\n        i -= 1;\n        len -= 1;\n\n        results.push(doc);\n      }\n    }\n\n    return results\n  }\n\n  removeAt(idx) {\n    this._docs.splice(idx, 1);\n    this._myIndex.removeAt(idx);\n  }\n\n  getIndex() {\n    return this._myIndex\n  }\n\n  search(query, { limit = -1 } = {}) {\n    const {\n      includeMatches,\n      includeScore,\n      shouldSort,\n      sortFn,\n      ignoreFieldNorm\n    } = this.options;\n\n    let results = isString(query)\n      ? isString(this._docs[0])\n        ? this._searchStringList(query)\n        : this._searchObjectList(query)\n      : this._searchLogical(query);\n\n    computeScore$1(results, { ignoreFieldNorm });\n\n    if (shouldSort) {\n      results.sort(sortFn);\n    }\n\n    if (isNumber(limit) && limit > -1) {\n      results = results.slice(0, limit);\n    }\n\n    return format(results, this._docs, {\n      includeMatches,\n      includeScore\n    })\n  }\n\n  _searchStringList(query) {\n    const searcher = createSearcher(query, this.options);\n    const { records } = this._myIndex;\n    const results = [];\n\n    // Iterate over every string in the index\n    records.forEach(({ v: text, i: idx, n: norm }) => {\n      if (!isDefined(text)) {\n        return\n      }\n\n      const { isMatch, score, indices } = searcher.searchIn(text);\n\n      if (isMatch) {\n        results.push({\n          item: text,\n          idx,\n          matches: [{ score, value: text, norm, indices }]\n        });\n      }\n    });\n\n    return results\n  }\n\n  _searchLogical(query) {\n\n    const expression = parse(query, this.options);\n\n    const evaluate = (node, item, idx) => {\n      if (!node.children) {\n        const { keyId, searcher } = node;\n\n        const matches = this._findMatches({\n          key: this._keyStore.get(keyId),\n          value: this._myIndex.getValueForItemAtKeyId(item, keyId),\n          searcher\n        });\n\n        if (matches && matches.length) {\n          return [\n            {\n              idx,\n              item,\n              matches\n            }\n          ]\n        }\n\n        return []\n      }\n\n      /*eslint indent: [2, 2, {\"SwitchCase\": 1}]*/\n      switch (node.operator) {\n        case LogicalOperator.AND: {\n          const res = [];\n          for (let i = 0, len = node.children.length; i < len; i += 1) {\n            const child = node.children[i];\n            const result = evaluate(child, item, idx);\n            if (result.length) {\n              res.push(...result);\n            } else {\n              return []\n            }\n          }\n          return res\n        }\n        case LogicalOperator.OR: {\n          const res = [];\n          for (let i = 0, len = node.children.length; i < len; i += 1) {\n            const child = node.children[i];\n            const result = evaluate(child, item, idx);\n            if (result.length) {\n              res.push(...result);\n              break\n            }\n          }\n          return res\n        }\n      }\n    };\n\n    const records = this._myIndex.records;\n    const resultMap = {};\n    const results = [];\n\n    records.forEach(({ $: item, i: idx }) => {\n      if (isDefined(item)) {\n        let expResults = evaluate(expression, item, idx);\n\n        if (expResults.length) {\n          // Dedupe when adding\n          if (!resultMap[idx]) {\n            resultMap[idx] = { idx, item, matches: [] };\n            results.push(resultMap[idx]);\n          }\n          expResults.forEach(({ matches }) => {\n            resultMap[idx].matches.push(...matches);\n          });\n        }\n      }\n    });\n\n    return results\n  }\n\n  _searchObjectList(query) {\n    const searcher = createSearcher(query, this.options);\n    const { keys, records } = this._myIndex;\n    const results = [];\n\n    // List is Array<Object>\n    records.forEach(({ $: item, i: idx }) => {\n      if (!isDefined(item)) {\n        return\n      }\n\n      let matches = [];\n\n      // Iterate over every key (i.e, path), and fetch the value at that key\n      keys.forEach((key, keyIndex) => {\n        matches.push(\n          ...this._findMatches({\n            key,\n            value: item[keyIndex],\n            searcher\n          })\n        );\n      });\n\n      if (matches.length) {\n        results.push({\n          idx,\n          item,\n          matches\n        });\n      }\n    });\n\n    return results\n  }\n  _findMatches({ key, value, searcher }) {\n    if (!isDefined(value)) {\n      return []\n    }\n\n    let matches = [];\n\n    if (isArray(value)) {\n      value.forEach(({ v: text, i: idx, n: norm }) => {\n        if (!isDefined(text)) {\n          return\n        }\n\n        const { isMatch, score, indices } = searcher.searchIn(text);\n\n        if (isMatch) {\n          matches.push({\n            score,\n            key,\n            value: text,\n            idx,\n            norm,\n            indices\n          });\n        }\n      });\n    } else {\n      const { v: text, n: norm } = value;\n\n      const { isMatch, score, indices } = searcher.searchIn(text);\n\n      if (isMatch) {\n        matches.push({ score, key, value: text, norm, indices });\n      }\n    }\n\n    return matches\n  }\n}\n\nFuse.version = '6.4.6';\nFuse.createIndex = createIndex;\nFuse.parseIndex = parseIndex;\nFuse.config = Config;\n\n{\n  Fuse.parseQuery = parse;\n}\n\n{\n  register(ExtendedSearch);\n}\n\nexport default Fuse;\n", "import Fuse from 'fuse.js';\n\nimport { Entry } from '../types';\n\nconst fuseOptions = {\n    includeMatches: true,\n    keys: ['name'],\n};\n\nexport const fuse: Fuse<Entry> = new Fuse([], fuseOptions);\n\nexport const setSearchEntries = async (fuse: Fuse<Entry>): Promise<void> => {\n    const resp = await fetch(`/data.json?v=${new Date().getTime()}`);\n    const data = await resp.json();\n\n    fuse.setCollection(data);\n};\n", "import { fuse } from './fuse-search';\nimport {\n    getSearchResultsElement,\n    getCurrentFocusResult,\n    createSearchResult,\n    createNoResult,\n    setFocusResult,\n    unSetFocusResult,\n} from './element-helpers';\n\nexport const handleSearchInput = (event: Event): void => {\n    const searchResultsElement = getSearchResultsElement();\n\n    if (!(event.target instanceof HTMLInputElement)) {\n        throw new Error('Unexpected target of search input event.');\n    }\n\n    const { value } = event.target;\n    const { focusName, focusIndex } = getCurrentFocusResult();\n\n    searchResultsElement.innerHTML = '';\n\n    if (value.length > 0) {\n        const results = fuse.search(value);\n\n        const resultElements = results.slice(0, 9).map((result, index) => {\n            const { item, matches } = result;\n\n            if (matches) {\n                const nameMatch = matches.find((match) => match.key === 'name');\n\n                if (nameMatch) {\n                    const { indices } = nameMatch;\n                    return createSearchResult(item, indices, index);\n                }\n            }\n\n            throw new Error('\"matches\" object has unexpected content');\n        });\n\n        const HAS_RESULT = resultElements.length > 0;\n\n        if (HAS_RESULT) {\n            resultElements.forEach((element) => searchResultsElement.appendChild(element));\n\n            const recycledResultFocusIndex = results.findIndex(\n                ({ item: { slug } }) => slug === focusName,\n            );\n\n            if (recycledResultFocusIndex > -1 && recycledResultFocusIndex <= focusIndex) {\n                setFocusResult(recycledResultFocusIndex);\n            } else {\n                setFocusResult(0);\n            }\n        }\n\n        if (!HAS_RESULT) {\n            const noResultElement = createNoResult();\n            searchResultsElement.appendChild(noResultElement);\n        }\n\n        searchResultsElement.classList.remove('hidden');\n    }\n\n    if (value.length === 0) {\n        searchResultsElement.classList.add('hidden');\n    }\n};\n\nexport const handleSearchKeys = (event: KeyboardEvent): void => {\n    const searchResultsElement = getSearchResultsElement();\n\n    const { key } = event;\n\n    if (key === 'ArrowDown') {\n        event.preventDefault();\n        const { focusIndex } = getCurrentFocusResult();\n\n        const maxResultIndex = searchResultsElement.children.length - 1;\n\n        if (focusIndex < maxResultIndex) {\n            unSetFocusResult(focusIndex);\n            setFocusResult(focusIndex + 1);\n        }\n\n        if (focusIndex === maxResultIndex) {\n            unSetFocusResult(focusIndex);\n            setFocusResult(0);\n        }\n    }\n\n    if (key === 'ArrowUp') {\n        event.preventDefault();\n        const { focusIndex } = getCurrentFocusResult();\n\n        const maxResultIndex = searchResultsElement.children.length - 1;\n\n        if (focusIndex > 0) {\n            unSetFocusResult(focusIndex);\n            setFocusResult(focusIndex - 1);\n        }\n\n        if (focusIndex === 0) {\n            unSetFocusResult(focusIndex);\n            setFocusResult(maxResultIndex);\n        }\n    }\n\n    if (key === 'Enter') {\n        event.preventDefault();\n        const { focusHref } = getCurrentFocusResult();\n\n        window.location.href = focusHref;\n    }\n\n    if (key === 'Tab') {\n        const { focusIndex } = getCurrentFocusResult();\n        unSetFocusResult(focusIndex);\n    }\n};\n", "import {\n    getSearchInputElement,\n    getSearchResultsElement,\n    getSearchWrapperElement,\n} from './search/element-helpers';\nimport { handleSearchInput, handleSearchKeys } from './search/search-handlers';\nimport { fuse, setSearchEntries } from './search/fuse-search';\n\n// Register serviceworker\nif ('serviceWorker' in navigator) {\n    window.addEventListener('load', () => {\n        navigator.serviceWorker.register('/service-worker.js');\n    });\n}\n\nsetSearchEntries(fuse);\n\nconst searchInit = () => {\n    const searchWrapper = getSearchWrapperElement();\n    const searchInput = getSearchInputElement();\n    const searchResultsBox = getSearchResultsElement();\n\n    searchInput.addEventListener('input', handleSearchInput);\n    searchInput.addEventListener('focus', handleSearchInput);\n    searchInput.addEventListener('keydown', handleSearchKeys);\n\n    searchWrapper.addEventListener('focusout', (event) => {\n        const relatedTarget = event.relatedTarget;\n        if (relatedTarget === null) {\n            searchResultsBox.classList.add('hidden');\n        }\n\n        if (relatedTarget instanceof HTMLElement && !relatedTarget.matches('#search-wrapper *')) {\n            searchResultsBox.classList.add('hidden');\n        }\n    });\n};\n\nif (document.readyState !== 'loading') {\n    searchInit();\n} else {\n    document.addEventListener('DOMContentLoaded', () => {\n        searchInit();\n    });\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGA,MAAM,yBAAyB;AAC/B,MAAM,wBAAwB;AAC9B,MAAM,wBAAwB;AAEvB,MAAM,0BAA0B,MAAmB;AACtD,UAAM,uBAAuB,SAAS,eAAe;AAErD,QAAI,CAAE,iCAAgC,cAAc;AAChD,YAAM,IAAI,MAAM;AAAA;AAGpB,WAAO;AAAA;AAGJ,MAAM,0BAA0B,MAAmB;AACtD,UAAM,uBAAuB,SAAS,eAAe;AAErD,QAAI,CAAE,iCAAgC,cAAc;AAChD,YAAM,IAAI,MAAM;AAAA;AAGpB,WAAO;AAAA;AAGJ,MAAM,wBAAwB,MAAwB;AACzD,UAAM,qBAAqB,SAAS,eAAe;AAEnD,QAAI,CAAE,+BAA8B,mBAAmB;AACnD,YAAM,IAAI,MAAM;AAAA;AAGpB,WAAO;AAAA;AAGX,MAAM,sBAAsB,CAAC,MAAc,YAAgD;AACvF,QAAI,SAAS;AACb,QAAI,WAAW;AACf,YAAQ,QAAQ,CAAC,CAAC,MAAM,KAAK,UAAU;AACnC,gBAAU,KAAK,UAAU,UAAU;AACnC,iBAAW,KAAK;AAEhB,YAAM,gBAAgB,KAAK,UAAU,MAAM,KAAK;AAChD,YAAM,cAAc,wCAAwC;AAE5D,gBAAU;AAEV,UAAI,UAAU,QAAQ,SAAS,GAAG;AAC9B,kBAAU,KAAK,UAAU,KAAK,GAAG,KAAK;AAAA;AAAA;AAI9C,WAAO;AAAA;AAGJ,MAAM,qBAAqB,CAC9B,MACA,SACA,UACc;AACd,UAAM,EAAE,MAAM,MAAM,SAAS;AAC7B,UAAM,aAAa,IAAI,QAAQ;AAE/B,UAAM,gBAAgB,SAAS,cAAc;AAC7C,kBAAc,UAAU,IAAI;AAC5B,kBAAc,aAAa,QAAQ,0BAA0B,OAAO;AACpE,kBAAc,aAAa,QAAQ,yBAAyB;AAC5D,kBAAc,aAAa,QAAQ,yBAAyB;AAE5D,UAAM,aAAa,SAAS,cAAc;AAC1C,eAAW,OAAO;AAClB,eAAW,UAAU,IAAI;AAEzB,UAAM,aAAa,SAAS,cAAc;AAC1C,eAAW,YAAY,oBAAoB,MAAM;AACjD,eAAW,UAAU,IAAI;AAEzB,UAAM,aAAa,SAAS,cAAc;AAC1C,eAAW,YAAY;AACvB,eAAW,UAAU,IAAI;AAEzB,eAAW,YAAY;AACvB,eAAW,YAAY;AACvB,kBAAc,YAAY;AAE1B,WAAO;AAAA;AAGJ,MAAM,iBAAiB,MAAmB;AAC7C,UAAM,UAAU,SAAS,cAAc;AACvC,YAAQ,UAAU,IAAI;AAEtB,UAAM,OAAO,SAAS,cAAc;AACpC,SAAK,YAAY;AAEjB,YAAQ,YAAY;AAEpB,WAAO;AAAA;AAGJ,MAAM,wBAAwB,MAA8B;AAC/D,UAAM,UAAU,SAAS,cAAc;AAEvC,QAAI,mBAAmB,aAAa;AAChC,YAAM,aAAa,QAAQ,QAAQ;AACnC,YAAM,YAAY,QAAQ,QAAQ;AAClC,YAAM,YAAY,QAAQ,QAAQ;AAElC,UAAI,aAAa,cAAc,WAAW;AACtC,eAAO;AAAA,UACH;AAAA,UACA,YAAY,SAAS;AAAA,UACrB;AAAA;AAAA;AAIR,YAAM,IAAI,MAAM;AAAA;AAGpB,WAAO;AAAA,MACH,WAAW;AAAA,MACX,YAAY;AAAA,MACZ,WAAW;AAAA;AAAA;AAInB,MAAM,gBAAgB,CAAC,gBAAgB;AAEhC,MAAM,mBAAmB,CAAC,gBAA8B;AAC3D,UAAM,UAAU,SAAS,cAAc,gBAAgB;AAEvD,QAAI,YAAY,MAAM;AAClB,cAAQ,UAAU,OAAO,GAAG;AAAA;AAAA;AAI7B,MAAM,iBAAiB,CAAC,gBAA8B;AACzD,UAAM,UAAU,SAAS,cAAc,gBAAgB;AAEvD,QAAI,YAAY,MAAM;AAClB,cAAQ,UAAU,IAAI,GAAG;AAAA;AAAA;;;ACrIjC,mBAAiB,OAAO;AACtB,WAAO,CAAC,MAAM,UACV,OAAO,WAAW,mBAClB,MAAM,QAAQ;AAAA;AAIpB,MAAM,WAAW,IAAI;AACrB,wBAAsB,OAAO;AAE3B,QAAI,OAAO,SAAS,UAAU;AAC5B,aAAO;AAAA;AAET,QAAI,SAAS,QAAQ;AACrB,WAAO,UAAU,OAAO,IAAI,SAAS,CAAC,WAAW,OAAO;AAAA;AAG1D,oBAAkB,OAAO;AACvB,WAAO,SAAS,OAAO,KAAK,aAAa;AAAA;AAG3C,oBAAkB,OAAO;AACvB,WAAO,OAAO,UAAU;AAAA;AAG1B,oBAAkB,OAAO;AACvB,WAAO,OAAO,UAAU;AAAA;AAI1B,qBAAmB,OAAO;AACxB,WACE,UAAU,QACV,UAAU,SACT,aAAa,UAAU,OAAO,UAAU;AAAA;AAI7C,oBAAkB,OAAO;AACvB,WAAO,OAAO,UAAU;AAAA;AAI1B,wBAAsB,OAAO;AAC3B,WAAO,SAAS,UAAU,UAAU;AAAA;AAGtC,qBAAmB,OAAO;AACxB,WAAO,UAAU,UAAa,UAAU;AAAA;AAG1C,mBAAiB,OAAO;AACtB,WAAO,CAAC,MAAM,OAAO;AAAA;AAKvB,kBAAgB,OAAO;AACrB,WAAO,SAAS,OACZ,UAAU,SACR,uBACA,kBACF,OAAO,UAAU,SAAS,KAAK;AAAA;AAKrC,MAAM,uBAAuB;AAE7B,MAAM,uCAAuC,CAAC,QAC5C,yBAAyB;AAE3B,MAAM,2BAA2B,CAAC,QAChC,iCAAiC;AAEnC,MAAM,uBAAuB,CAAC,SAAS,WAAW;AAElD,MAAM,2BAA2B,CAAC,QAChC,6BAA6B;AAE/B,MAAM,SAAS,OAAO,UAAU;AAEhC,uBAAe;AAAA,IACb,YAAY,MAAM;AAChB,WAAK,QAAQ;AACb,WAAK,UAAU;AAEf,UAAI,cAAc;AAElB,WAAK,QAAQ,CAAC,QAAQ;AACpB,YAAI,MAAM,UAAU;AAEpB,uBAAe,IAAI;AAEnB,aAAK,MAAM,KAAK;AAChB,aAAK,QAAQ,IAAI,MAAM;AAEvB,uBAAe,IAAI;AAAA;AAIrB,WAAK,MAAM,QAAQ,CAAC,QAAQ;AAC1B,YAAI,UAAU;AAAA;AAAA;AAAA,IAGlB,IAAI,OAAO;AACT,aAAO,KAAK,QAAQ;AAAA;AAAA,IAEtB,OAAO;AACL,aAAO,KAAK;AAAA;AAAA,IAEd,SAAS;AACP,aAAO,KAAK,UAAU,KAAK;AAAA;AAAA;AAI/B,qBAAmB,KAAK;AACtB,QAAI,OAAO;AACX,QAAI,KAAK;AACT,QAAI,MAAM;AACV,QAAI,SAAS;AAEb,QAAI,SAAS,QAAQ,QAAQ,MAAM;AACjC,YAAM;AACN,aAAO,cAAc;AACrB,WAAK,YAAY;AAAA,WACZ;AACL,UAAI,CAAC,OAAO,KAAK,KAAK,SAAS;AAC7B,cAAM,IAAI,MAAM,qBAAqB;AAAA;AAGvC,YAAM,OAAO,IAAI;AACjB,YAAM;AAEN,UAAI,OAAO,KAAK,KAAK,WAAW;AAC9B,iBAAS,IAAI;AAEb,YAAI,UAAU,GAAG;AACf,gBAAM,IAAI,MAAM,yBAAyB;AAAA;AAAA;AAI7C,aAAO,cAAc;AACrB,WAAK,YAAY;AAAA;AAGnB,WAAO,EAAE,MAAM,IAAI,QAAQ;AAAA;AAG7B,yBAAuB,KAAK;AAC1B,WAAO,QAAQ,OAAO,MAAM,IAAI,MAAM;AAAA;AAGxC,uBAAqB,KAAK;AACxB,WAAO,QAAQ,OAAO,IAAI,KAAK,OAAO;AAAA;AAGxC,eAAa,KAAK,MAAM;AACtB,QAAI,OAAO;AACX,QAAI,MAAM;AAEV,UAAM,UAAU,CAAC,MAAK,OAAM,UAAU;AACpC,UAAI,CAAC,UAAU,OAAM;AACnB;AAAA;AAEF,UAAI,CAAC,MAAK,QAAQ;AAEhB,aAAK,KAAK;AAAA,aACL;AACL,YAAI,MAAM,MAAK;AAEf,cAAM,QAAQ,KAAI;AAElB,YAAI,CAAC,UAAU,QAAQ;AACrB;AAAA;AAKF,YACE,UAAU,MAAK,SAAS,KACvB,UAAS,UAAU,SAAS,UAAU,UAAU,SACjD;AACA,eAAK,KAAK,SAAS;AAAA,mBACV,QAAQ,QAAQ;AACzB,gBAAM;AAEN,mBAAS,IAAI,GAAG,MAAM,MAAM,QAAQ,IAAI,KAAK,KAAK,GAAG;AACnD,oBAAQ,MAAM,IAAI,OAAM,QAAQ;AAAA;AAAA,mBAEzB,MAAK,QAAQ;AAEtB,kBAAQ,OAAO,OAAM,QAAQ;AAAA;AAAA;AAAA;AAMnC,YAAQ,KAAK,SAAS,QAAQ,KAAK,MAAM,OAAO,MAAM;AAEtD,WAAO,MAAM,OAAO,KAAK;AAAA;AAG3B,MAAM,eAAe;AAAA,IAInB,gBAAgB;AAAA,IAGhB,gBAAgB;AAAA,IAEhB,oBAAoB;AAAA;AAGtB,MAAM,eAAe;AAAA,IAGnB,iBAAiB;AAAA,IAEjB,cAAc;AAAA,IAEd,MAAM;AAAA,IAEN,YAAY;AAAA,IAEZ,QAAQ,CAAC,GAAG,MACV,EAAE,UAAU,EAAE,QAAS,EAAE,MAAM,EAAE,MAAM,KAAK,IAAK,EAAE,QAAQ,EAAE,QAAQ,KAAK;AAAA;AAG9E,MAAM,eAAe;AAAA,IAEnB,UAAU;AAAA,IAGV,WAAW;AAAA,IAMX,UAAU;AAAA;AAGZ,MAAM,kBAAkB;AAAA,IAEtB,mBAAmB;AAAA,IAGnB,OAAO;AAAA,IAIP,gBAAgB;AAAA,IAIhB,iBAAiB;AAAA;AAGnB,MAAI,SAAS,gEACR,eACA,eACA,eACA;AAGL,MAAM,QAAQ;AAId,gBAAc,WAAW,GAAG;AAC1B,UAAM,QAAQ,IAAI;AAClB,UAAM,IAAI,KAAK,IAAI,IAAI;AAEvB,WAAO;AAAA,MACL,IAAI,OAAO;AACT,cAAM,YAAY,MAAM,MAAM,OAAO;AAErC,YAAI,MAAM,IAAI,YAAY;AACxB,iBAAO,MAAM,IAAI;AAAA;AAGnB,cAAM,QAAO,IAAI,KAAK,KAAK;AAG3B,cAAM,IAAI,WAAW,KAAK,MAAM,QAAO,KAAK;AAE5C,cAAM,IAAI,WAAW;AAErB,eAAO;AAAA;AAAA,MAET,QAAQ;AACN,cAAM;AAAA;AAAA;AAAA;AAKZ,wBAAgB;AAAA,IACd,YAAY,EAAE,QAAQ,OAAO,UAAU,IAAI;AACzC,WAAK,OAAO,KAAK;AACjB,WAAK,QAAQ;AACb,WAAK,YAAY;AAEjB,WAAK;AAAA;AAAA,IAEP,WAAW,OAAO,IAAI;AACpB,WAAK,OAAO;AAAA;AAAA,IAEd,gBAAgB,UAAU,IAAI;AAC5B,WAAK,UAAU;AAAA;AAAA,IAEjB,QAAQ,OAAO,IAAI;AACjB,WAAK,OAAO;AACZ,WAAK,WAAW;AAChB,WAAK,QAAQ,CAAC,KAAK,QAAQ;AACzB,aAAK,SAAS,IAAI,MAAM;AAAA;AAAA;AAAA,IAG5B,SAAS;AACP,UAAI,KAAK,aAAa,CAAC,KAAK,KAAK,QAAQ;AACvC;AAAA;AAGF,WAAK,YAAY;AAGjB,UAAI,SAAS,KAAK,KAAK,KAAK;AAC1B,aAAK,KAAK,QAAQ,CAAC,KAAK,aAAa;AACnC,eAAK,WAAW,KAAK;AAAA;AAAA,aAElB;AAEL,aAAK,KAAK,QAAQ,CAAC,KAAK,aAAa;AACnC,eAAK,WAAW,KAAK;AAAA;AAAA;AAIzB,WAAK,KAAK;AAAA;AAAA,IAGZ,IAAI,KAAK;AACP,YAAM,MAAM,KAAK;AAEjB,UAAI,SAAS,MAAM;AACjB,aAAK,WAAW,KAAK;AAAA,aAChB;AACL,aAAK,WAAW,KAAK;AAAA;AAAA;AAAA,IAIzB,SAAS,KAAK;AACZ,WAAK,QAAQ,OAAO,KAAK;AAGzB,eAAS,IAAI,KAAK,MAAM,KAAK,QAAQ,IAAI,KAAK,KAAK,GAAG;AACpD,aAAK,QAAQ,GAAG,KAAK;AAAA;AAAA;AAAA,IAGzB,uBAAuB,MAAM,OAAO;AAClC,aAAO,KAAK,KAAK,SAAS;AAAA;AAAA,IAE5B,OAAO;AACL,aAAO,KAAK,QAAQ;AAAA;AAAA,IAEtB,WAAW,KAAK,UAAU;AACxB,UAAI,CAAC,UAAU,QAAQ,QAAQ,MAAM;AACnC;AAAA;AAGF,UAAI,SAAS;AAAA,QACX,GAAG;AAAA,QACH,GAAG;AAAA,QACH,GAAG,KAAK,KAAK,IAAI;AAAA;AAGnB,WAAK,QAAQ,KAAK;AAAA;AAAA,IAEpB,WAAW,KAAK,UAAU;AACxB,UAAI,SAAS,EAAE,GAAG,UAAU,GAAG;AAG/B,WAAK,KAAK,QAAQ,CAAC,KAAK,aAAa;AAEnC,YAAI,QAAQ,KAAK,MAAM,KAAK,IAAI;AAEhC,YAAI,CAAC,UAAU,QAAQ;AACrB;AAAA;AAGF,YAAI,QAAQ,QAAQ;AAClB,cAAI,aAAa;AACjB,gBAAM,QAAQ,CAAC,EAAE,gBAAgB,IAAI;AAErC,iBAAO,MAAM,QAAQ;AACnB,kBAAM,EAAE,gBAAgB,kBAAU,MAAM;AAExC,gBAAI,CAAC,UAAU,SAAQ;AACrB;AAAA;AAGF,gBAAI,SAAS,WAAU,CAAC,QAAQ,SAAQ;AACtC,kBAAI,YAAY;AAAA,gBACd,GAAG;AAAA,gBACH,GAAG;AAAA,gBACH,GAAG,KAAK,KAAK,IAAI;AAAA;AAGnB,yBAAW,KAAK;AAAA,uBACP,QAAQ,SAAQ;AACzB,qBAAM,QAAQ,CAAC,MAAM,MAAM;AACzB,sBAAM,KAAK;AAAA,kBACT,gBAAgB;AAAA,kBAChB,OAAO;AAAA;AAAA;AAAA;AAAA;AAKf,iBAAO,EAAE,YAAY;AAAA,mBACZ,CAAC,QAAQ,QAAQ;AAC1B,cAAI,YAAY;AAAA,YACd,GAAG;AAAA,YACH,GAAG,KAAK,KAAK,IAAI;AAAA;AAGnB,iBAAO,EAAE,YAAY;AAAA;AAAA;AAIzB,WAAK,QAAQ,KAAK;AAAA;AAAA,IAEpB,SAAS;AACP,aAAO;AAAA,QACL,MAAM,KAAK;AAAA,QACX,SAAS,KAAK;AAAA;AAAA;AAAA;AAKpB,uBAAqB,MAAM,MAAM,EAAE,QAAQ,OAAO,UAAU,IAAI;AAC9D,UAAM,UAAU,IAAI,UAAU,EAAE;AAChC,YAAQ,QAAQ,KAAK,IAAI;AACzB,YAAQ,WAAW;AACnB,YAAQ;AACR,WAAO;AAAA;AAGT,sBAAoB,MAAM,EAAE,QAAQ,OAAO,UAAU,IAAI;AACvD,UAAM,EAAE,MAAM,YAAY;AAC1B,UAAM,UAAU,IAAI,UAAU,EAAE;AAChC,YAAQ,QAAQ;AAChB,YAAQ,gBAAgB;AACxB,WAAO;AAAA;AAGT,wBACE,SACA;AAAA,IACE,SAAS;AAAA,IACT,kBAAkB;AAAA,IAClB,mBAAmB;AAAA,IACnB,WAAW,OAAO;AAAA,IAClB,iBAAiB,OAAO;AAAA,MACtB,IACJ;AACA,UAAM,WAAW,SAAS,QAAQ;AAElC,QAAI,gBAAgB;AAClB,aAAO;AAAA;AAGT,UAAM,YAAY,KAAK,IAAI,mBAAmB;AAE9C,QAAI,CAAC,UAAU;AAEb,aAAO,YAAY,IAAM;AAAA;AAG3B,WAAO,WAAW,YAAY;AAAA;AAGhC,gCACE,YAAY,IACZ,qBAAqB,OAAO,oBAC5B;AACA,QAAI,UAAU;AACd,QAAI,QAAQ;AACZ,QAAI,MAAM;AACV,QAAI,IAAI;AAER,aAAS,MAAM,UAAU,QAAQ,IAAI,KAAK,KAAK,GAAG;AAChD,UAAI,QAAQ,UAAU;AACtB,UAAI,SAAS,UAAU,IAAI;AACzB,gBAAQ;AAAA,iBACC,CAAC,SAAS,UAAU,IAAI;AACjC,cAAM,IAAI;AACV,YAAI,MAAM,QAAQ,KAAK,oBAAoB;AACzC,kBAAQ,KAAK,CAAC,OAAO;AAAA;AAEvB,gBAAQ;AAAA;AAAA;AAKZ,QAAI,UAAU,IAAI,MAAM,IAAI,SAAS,oBAAoB;AACvD,cAAQ,KAAK,CAAC,OAAO,IAAI;AAAA;AAG3B,WAAO;AAAA;AAIT,MAAM,WAAW;AAEjB,kBACE,MACA,SACA,iBACA;AAAA,IACE,WAAW,OAAO;AAAA,IAClB,WAAW,OAAO;AAAA,IAClB,YAAY,OAAO;AAAA,IACnB,iBAAiB,OAAO;AAAA,IACxB,qBAAqB,OAAO;AAAA,IAC5B,iBAAiB,OAAO;AAAA,IACxB,iBAAiB,OAAO;AAAA,MACtB,IACJ;AACA,QAAI,QAAQ,SAAS,UAAU;AAC7B,YAAM,IAAI,MAAM,yBAAyB;AAAA;AAG3C,UAAM,aAAa,QAAQ;AAE3B,UAAM,UAAU,KAAK;AAErB,UAAM,mBAAmB,KAAK,IAAI,GAAG,KAAK,IAAI,UAAU;AAExD,QAAI,mBAAmB;AAEvB,QAAI,eAAe;AAInB,UAAM,iBAAiB,qBAAqB,KAAK;AAEjD,UAAM,YAAY,iBAAiB,MAAM,WAAW;AAEpD,QAAI;AAGJ,WAAQ,SAAQ,KAAK,QAAQ,SAAS,iBAAiB,IAAI;AACzD,UAAI,QAAQ,aAAa,SAAS;AAAA,QAChC,iBAAiB;AAAA,QACjB;AAAA,QACA;AAAA,QACA;AAAA;AAGF,yBAAmB,KAAK,IAAI,OAAO;AACnC,qBAAe,QAAQ;AAEvB,UAAI,gBAAgB;AAClB,YAAI,IAAI;AACR,eAAO,IAAI,YAAY;AACrB,oBAAU,QAAQ,KAAK;AACvB,eAAK;AAAA;AAAA;AAAA;AAMX,mBAAe;AAEf,QAAI,aAAa;AACjB,QAAI,aAAa;AACjB,QAAI,SAAS,aAAa;AAE1B,UAAM,OAAO,KAAM,aAAa;AAEhC,aAAS,IAAI,GAAG,IAAI,YAAY,KAAK,GAAG;AAItC,UAAI,SAAS;AACb,UAAI,SAAS;AAEb,aAAO,SAAS,QAAQ;AACtB,cAAM,SAAQ,aAAa,SAAS;AAAA,UAClC,QAAQ;AAAA,UACR,iBAAiB,mBAAmB;AAAA,UACpC;AAAA,UACA;AAAA,UACA;AAAA;AAGF,YAAI,UAAS,kBAAkB;AAC7B,mBAAS;AAAA,eACJ;AACL,mBAAS;AAAA;AAGX,iBAAS,KAAK,MAAO,UAAS,UAAU,IAAI;AAAA;AAI9C,eAAS;AAET,UAAI,QAAQ,KAAK,IAAI,GAAG,mBAAmB,SAAS;AACpD,UAAI,SAAS,iBACT,UACA,KAAK,IAAI,mBAAmB,QAAQ,WAAW;AAGnD,UAAI,SAAS,MAAM,SAAS;AAE5B,aAAO,SAAS,KAAM,MAAK,KAAK;AAEhC,eAAS,IAAI,QAAQ,KAAK,OAAO,KAAK,GAAG;AACvC,YAAI,kBAAkB,IAAI;AAC1B,YAAI,YAAY,gBAAgB,KAAK,OAAO;AAE5C,YAAI,gBAAgB;AAElB,oBAAU,mBAAmB,CAAC,CAAC,CAAC;AAAA;AAIlC,eAAO,KAAO,QAAO,IAAI,MAAM,IAAK,KAAK;AAGzC,YAAI,GAAG;AACL,iBAAO,MACH,YAAW,IAAI,KAAK,WAAW,OAAO,IAAK,IAAI,WAAW,IAAI;AAAA;AAGpE,YAAI,OAAO,KAAK,MAAM;AACpB,uBAAa,aAAa,SAAS;AAAA,YACjC,QAAQ;AAAA,YACR;AAAA,YACA;AAAA,YACA;AAAA,YACA;AAAA;AAKF,cAAI,cAAc,kBAAkB;AAElC,+BAAmB;AACnB,2BAAe;AAGf,gBAAI,gBAAgB,kBAAkB;AACpC;AAAA;AAIF,oBAAQ,KAAK,IAAI,GAAG,IAAI,mBAAmB;AAAA;AAAA;AAAA;AAMjD,YAAM,QAAQ,aAAa,SAAS;AAAA,QAClC,QAAQ,IAAI;AAAA,QACZ,iBAAiB;AAAA,QACjB;AAAA,QACA;AAAA,QACA;AAAA;AAGF,UAAI,QAAQ,kBAAkB;AAC5B;AAAA;AAGF,mBAAa;AAAA;AAGf,UAAM,SAAS;AAAA,MACb,SAAS,gBAAgB;AAAA,MAEzB,OAAO,KAAK,IAAI,MAAO;AAAA;AAGzB,QAAI,gBAAgB;AAClB,YAAM,UAAU,qBAAqB,WAAW;AAChD,UAAI,CAAC,QAAQ,QAAQ;AACnB,eAAO,UAAU;AAAA,iBACR,gBAAgB;AACzB,eAAO,UAAU;AAAA;AAAA;AAIrB,WAAO;AAAA;AAGT,iCAA+B,SAAS;AACtC,QAAI,OAAO;AAEX,aAAS,IAAI,GAAG,MAAM,QAAQ,QAAQ,IAAI,KAAK,KAAK,GAAG;AACrD,YAAM,OAAO,QAAQ,OAAO;AAC5B,WAAK,QAAS,MAAK,SAAS,KAAM,KAAM,MAAM,IAAI;AAAA;AAGpD,WAAO;AAAA;AAGT,0BAAkB;AAAA,IAChB,YACE,SACA;AAAA,MACE,WAAW,OAAO;AAAA,MAClB,YAAY,OAAO;AAAA,MACnB,WAAW,OAAO;AAAA,MAClB,iBAAiB,OAAO;AAAA,MACxB,iBAAiB,OAAO;AAAA,MACxB,qBAAqB,OAAO;AAAA,MAC5B,kBAAkB,OAAO;AAAA,MACzB,iBAAiB,OAAO;AAAA,QACtB,IACJ;AACA,WAAK,UAAU;AAAA,QACb;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA;AAGF,WAAK,UAAU,kBAAkB,UAAU,QAAQ;AAEnD,WAAK,SAAS;AAEd,UAAI,CAAC,KAAK,QAAQ,QAAQ;AACxB;AAAA;AAGF,YAAM,WAAW,CAAC,UAAS,eAAe;AACxC,aAAK,OAAO,KAAK;AAAA,UACf;AAAA,UACA,UAAU,sBAAsB;AAAA,UAChC;AAAA;AAAA;AAIJ,YAAM,MAAM,KAAK,QAAQ;AAEzB,UAAI,MAAM,UAAU;AAClB,YAAI,IAAI;AACR,cAAM,YAAY,MAAM;AACxB,cAAM,MAAM,MAAM;AAElB,eAAO,IAAI,KAAK;AACd,mBAAS,KAAK,QAAQ,OAAO,GAAG,WAAW;AAC3C,eAAK;AAAA;AAGP,YAAI,WAAW;AACb,gBAAM,aAAa,MAAM;AACzB,mBAAS,KAAK,QAAQ,OAAO,aAAa;AAAA;AAAA,aAEvC;AACL,iBAAS,KAAK,SAAS;AAAA;AAAA;AAAA,IAI3B,SAAS,MAAM;AACb,YAAM,EAAE,iBAAiB,mBAAmB,KAAK;AAEjD,UAAI,CAAC,iBAAiB;AACpB,eAAO,KAAK;AAAA;AAId,UAAI,KAAK,YAAY,MAAM;AACzB,YAAI,UAAS;AAAA,UACX,SAAS;AAAA,UACT,OAAO;AAAA;AAGT,YAAI,gBAAgB;AAClB,kBAAO,UAAU,CAAC,CAAC,GAAG,KAAK,SAAS;AAAA;AAGtC,eAAO;AAAA;AAIT,YAAM;AAAA,QACJ;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,UACE,KAAK;AAET,UAAI,aAAa;AACjB,UAAI,aAAa;AACjB,UAAI,aAAa;AAEjB,WAAK,OAAO,QAAQ,CAAC,EAAE,SAAS,UAAU,iBAAiB;AACzD,cAAM,EAAE,SAAS,OAAO,YAAY,OAAO,MAAM,SAAS,UAAU;AAAA,UAClE,UAAU,WAAW;AAAA,UACrB;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA;AAGF,YAAI,SAAS;AACX,uBAAa;AAAA;AAGf,sBAAc;AAEd,YAAI,WAAW,SAAS;AACtB,uBAAa,CAAC,GAAG,YAAY,GAAG;AAAA;AAAA;AAIpC,UAAI,SAAS;AAAA,QACX,SAAS;AAAA,QACT,OAAO,aAAa,aAAa,KAAK,OAAO,SAAS;AAAA;AAGxD,UAAI,cAAc,gBAAgB;AAChC,eAAO,UAAU;AAAA;AAGnB,aAAO;AAAA;AAAA;AAIX,wBAAgB;AAAA,IACd,YAAY,SAAS;AACnB,WAAK,UAAU;AAAA;AAAA,WAEV,aAAa,SAAS;AAC3B,aAAO,SAAS,SAAS,KAAK;AAAA;AAAA,WAEzB,cAAc,SAAS;AAC5B,aAAO,SAAS,SAAS,KAAK;AAAA;AAAA,IAEhC,SAAiB;AAAA;AAAA;AAGnB,oBAAkB,SAAS,KAAK;AAC9B,UAAM,UAAU,QAAQ,MAAM;AAC9B,WAAO,UAAU,QAAQ,KAAK;AAAA;AAKhC,iCAAyB,UAAU;AAAA,IACjC,YAAY,SAAS;AACnB,YAAM;AAAA;AAAA,eAEG,OAAO;AAChB,aAAO;AAAA;AAAA,eAEE,aAAa;AACtB,aAAO;AAAA;AAAA,eAEE,cAAc;AACvB,aAAO;AAAA;AAAA,IAET,OAAO,MAAM;AACX,YAAM,UAAU,SAAS,KAAK;AAE9B,aAAO;AAAA,QACL;AAAA,QACA,OAAO,UAAU,IAAI;AAAA,QACrB,SAAS,CAAC,GAAG,KAAK,QAAQ,SAAS;AAAA;AAAA;AAAA;AAOzC,wCAAgC,UAAU;AAAA,IACxC,YAAY,SAAS;AACnB,YAAM;AAAA;AAAA,eAEG,OAAO;AAChB,aAAO;AAAA;AAAA,eAEE,aAAa;AACtB,aAAO;AAAA;AAAA,eAEE,cAAc;AACvB,aAAO;AAAA;AAAA,IAET,OAAO,MAAM;AACX,YAAM,QAAQ,KAAK,QAAQ,KAAK;AAChC,YAAM,UAAU,UAAU;AAE1B,aAAO;AAAA,QACL;AAAA,QACA,OAAO,UAAU,IAAI;AAAA,QACrB,SAAS,CAAC,GAAG,KAAK,SAAS;AAAA;AAAA;AAAA;AAOjC,uCAA+B,UAAU;AAAA,IACvC,YAAY,SAAS;AACnB,YAAM;AAAA;AAAA,eAEG,OAAO;AAChB,aAAO;AAAA;AAAA,eAEE,aAAa;AACtB,aAAO;AAAA;AAAA,eAEE,cAAc;AACvB,aAAO;AAAA;AAAA,IAET,OAAO,MAAM;AACX,YAAM,UAAU,KAAK,WAAW,KAAK;AAErC,aAAO;AAAA,QACL;AAAA,QACA,OAAO,UAAU,IAAI;AAAA,QACrB,SAAS,CAAC,GAAG,KAAK,QAAQ,SAAS;AAAA;AAAA;AAAA;AAOzC,8CAAsC,UAAU;AAAA,IAC9C,YAAY,SAAS;AACnB,YAAM;AAAA;AAAA,eAEG,OAAO;AAChB,aAAO;AAAA;AAAA,eAEE,aAAa;AACtB,aAAO;AAAA;AAAA,eAEE,cAAc;AACvB,aAAO;AAAA;AAAA,IAET,OAAO,MAAM;AACX,YAAM,UAAU,CAAC,KAAK,WAAW,KAAK;AAEtC,aAAO;AAAA,QACL;AAAA,QACA,OAAO,UAAU,IAAI;AAAA,QACrB,SAAS,CAAC,GAAG,KAAK,SAAS;AAAA;AAAA;AAAA;AAOjC,uCAA+B,UAAU;AAAA,IACvC,YAAY,SAAS;AACnB,YAAM;AAAA;AAAA,eAEG,OAAO;AAChB,aAAO;AAAA;AAAA,eAEE,aAAa;AACtB,aAAO;AAAA;AAAA,eAEE,cAAc;AACvB,aAAO;AAAA;AAAA,IAET,OAAO,MAAM;AACX,YAAM,UAAU,KAAK,SAAS,KAAK;AAEnC,aAAO;AAAA,QACL;AAAA,QACA,OAAO,UAAU,IAAI;AAAA,QACrB,SAAS,CAAC,KAAK,SAAS,KAAK,QAAQ,QAAQ,KAAK,SAAS;AAAA;AAAA;AAAA;AAOjE,8CAAsC,UAAU;AAAA,IAC9C,YAAY,SAAS;AACnB,YAAM;AAAA;AAAA,eAEG,OAAO;AAChB,aAAO;AAAA;AAAA,eAEE,aAAa;AACtB,aAAO;AAAA;AAAA,eAEE,cAAc;AACvB,aAAO;AAAA;AAAA,IAET,OAAO,MAAM;AACX,YAAM,UAAU,CAAC,KAAK,SAAS,KAAK;AACpC,aAAO;AAAA,QACL;AAAA,QACA,OAAO,UAAU,IAAI;AAAA,QACrB,SAAS,CAAC,GAAG,KAAK,SAAS;AAAA;AAAA;AAAA;AAKjC,iCAAyB,UAAU;AAAA,IACjC,YACE,SACA;AAAA,MACE,WAAW,OAAO;AAAA,MAClB,YAAY,OAAO;AAAA,MACnB,WAAW,OAAO;AAAA,MAClB,iBAAiB,OAAO;AAAA,MACxB,iBAAiB,OAAO;AAAA,MACxB,qBAAqB,OAAO;AAAA,MAC5B,kBAAkB,OAAO;AAAA,MACzB,iBAAiB,OAAO;AAAA,QACtB,IACJ;AACA,YAAM;AACN,WAAK,eAAe,IAAI,YAAY,SAAS;AAAA,QAC3C;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA;AAAA;AAAA,eAGO,OAAO;AAChB,aAAO;AAAA;AAAA,eAEE,aAAa;AACtB,aAAO;AAAA;AAAA,eAEE,cAAc;AACvB,aAAO;AAAA;AAAA,IAET,OAAO,MAAM;AACX,aAAO,KAAK,aAAa,SAAS;AAAA;AAAA;AAMtC,mCAA2B,UAAU;AAAA,IACnC,YAAY,SAAS;AACnB,YAAM;AAAA;AAAA,eAEG,OAAO;AAChB,aAAO;AAAA;AAAA,eAEE,aAAa;AACtB,aAAO;AAAA;AAAA,eAEE,cAAc;AACvB,aAAO;AAAA;AAAA,IAET,OAAO,MAAM;AACX,UAAI,WAAW;AACf,UAAI;AAEJ,YAAM,UAAU;AAChB,YAAM,aAAa,KAAK,QAAQ;AAGhC,aAAQ,SAAQ,KAAK,QAAQ,KAAK,SAAS,aAAa,IAAI;AAC1D,mBAAW,QAAQ;AACnB,gBAAQ,KAAK,CAAC,OAAO,WAAW;AAAA;AAGlC,YAAM,UAAU,CAAC,CAAC,QAAQ;AAE1B,aAAO;AAAA,QACL;AAAA,QACA,OAAO,UAAU,IAAI;AAAA,QACrB;AAAA;AAAA;AAAA;AAMN,MAAM,YAAY;AAAA,IAChB;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA;AAGF,MAAM,eAAe,UAAU;AAG/B,MAAM,WAAW;AACjB,MAAM,WAAW;AAKjB,sBAAoB,SAAS,UAAU,IAAI;AACzC,WAAO,QAAQ,MAAM,UAAU,IAAI,CAAC,SAAS;AAC3C,UAAI,QAAQ,KACT,OACA,MAAM,UACN,OAAO,CAAC,UAAS,SAAQ,CAAC,CAAC,MAAK;AAEnC,UAAI,UAAU;AACd,eAAS,IAAI,GAAG,MAAM,MAAM,QAAQ,IAAI,KAAK,KAAK,GAAG;AACnD,cAAM,YAAY,MAAM;AAGxB,YAAI,QAAQ;AACZ,YAAI,MAAM;AACV,eAAO,CAAC,SAAS,EAAE,MAAM,cAAc;AACrC,gBAAM,WAAW,UAAU;AAC3B,cAAI,QAAQ,SAAS,aAAa;AAClC,cAAI,OAAO;AACT,oBAAQ,KAAK,IAAI,SAAS,OAAO;AACjC,oBAAQ;AAAA;AAAA;AAIZ,YAAI,OAAO;AACT;AAAA;AAIF,cAAM;AACN,eAAO,EAAE,MAAM,cAAc;AAC3B,gBAAM,WAAW,UAAU;AAC3B,cAAI,QAAQ,SAAS,cAAc;AACnC,cAAI,OAAO;AACT,oBAAQ,KAAK,IAAI,SAAS,OAAO;AACjC;AAAA;AAAA;AAAA;AAKN,aAAO;AAAA;AAAA;AAMX,MAAM,gBAAgB,IAAI,IAAI,CAAC,WAAW,MAAM,aAAa;AA8B7D,6BAAqB;AAAA,IACnB,YACE,SACA;AAAA,MACE,kBAAkB,OAAO;AAAA,MACzB,iBAAiB,OAAO;AAAA,MACxB,qBAAqB,OAAO;AAAA,MAC5B,iBAAiB,OAAO;AAAA,MACxB,iBAAiB,OAAO;AAAA,MACxB,WAAW,OAAO;AAAA,MAClB,YAAY,OAAO;AAAA,MACnB,WAAW,OAAO;AAAA,QAChB,IACJ;AACA,WAAK,QAAQ;AACb,WAAK,UAAU;AAAA,QACb;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA;AAGF,WAAK,UAAU,kBAAkB,UAAU,QAAQ;AACnD,WAAK,QAAQ,WAAW,KAAK,SAAS,KAAK;AAAA;AAAA,WAGtC,UAAU,GAAG,SAAS;AAC3B,aAAO,QAAQ;AAAA;AAAA,IAGjB,SAAS,MAAM;AACb,YAAM,QAAQ,KAAK;AAEnB,UAAI,CAAC,OAAO;AACV,eAAO;AAAA,UACL,SAAS;AAAA,UACT,OAAO;AAAA;AAAA;AAIX,YAAM,EAAE,gBAAgB,oBAAoB,KAAK;AAEjD,aAAO,kBAAkB,OAAO,KAAK;AAErC,UAAI,aAAa;AACjB,UAAI,aAAa;AACjB,UAAI,aAAa;AAGjB,eAAS,IAAI,GAAG,OAAO,MAAM,QAAQ,IAAI,MAAM,KAAK,GAAG;AACrD,cAAM,aAAY,MAAM;AAGxB,mBAAW,SAAS;AACpB,qBAAa;AAGb,iBAAS,IAAI,GAAG,OAAO,WAAU,QAAQ,IAAI,MAAM,KAAK,GAAG;AACzD,gBAAM,WAAW,WAAU;AAC3B,gBAAM,EAAE,SAAS,SAAS,UAAU,SAAS,OAAO;AAEpD,cAAI,SAAS;AACX,0BAAc;AACd,0BAAc;AACd,gBAAI,gBAAgB;AAClB,oBAAM,OAAO,SAAS,YAAY;AAClC,kBAAI,cAAc,IAAI,OAAO;AAC3B,6BAAa,CAAC,GAAG,YAAY,GAAG;AAAA,qBAC3B;AACL,2BAAW,KAAK;AAAA;AAAA;AAAA,iBAGf;AACL,yBAAa;AACb,yBAAa;AACb,uBAAW,SAAS;AACpB;AAAA;AAAA;AAKJ,YAAI,YAAY;AACd,cAAI,SAAS;AAAA,YACX,SAAS;AAAA,YACT,OAAO,aAAa;AAAA;AAGtB,cAAI,gBAAgB;AAClB,mBAAO,UAAU;AAAA;AAGnB,iBAAO;AAAA;AAAA;AAKX,aAAO;AAAA,QACL,SAAS;AAAA,QACT,OAAO;AAAA;AAAA;AAAA;AAKb,MAAM,sBAAsB;AAE5B,uBAAqB,MAAM;AACzB,wBAAoB,KAAK,GAAG;AAAA;AAG9B,0BAAwB,SAAS,SAAS;AACxC,aAAS,IAAI,GAAG,MAAM,oBAAoB,QAAQ,IAAI,KAAK,KAAK,GAAG;AACjE,UAAI,gBAAgB,oBAAoB;AACxC,UAAI,cAAc,UAAU,SAAS,UAAU;AAC7C,eAAO,IAAI,cAAc,SAAS;AAAA;AAAA;AAItC,WAAO,IAAI,YAAY,SAAS;AAAA;AAGlC,MAAM,kBAAkB;AAAA,IACtB,KAAK;AAAA,IACL,IAAI;AAAA;AAGN,MAAM,UAAU;AAAA,IACd,MAAM;AAAA,IACN,SAAS;AAAA;AAGX,MAAM,eAAe,CAAC,UACpB,CAAC,CAAE,OAAM,gBAAgB,QAAQ,MAAM,gBAAgB;AAEzD,MAAM,SAAS,CAAC,UAAU,CAAC,CAAC,MAAM,QAAQ;AAE1C,MAAM,SAAS,CAAC,UACd,CAAC,QAAQ,UAAU,SAAS,UAAU,CAAC,aAAa;AAEtD,MAAM,oBAAoB,CAAC,UAAW;AAAA,KACnC,gBAAgB,MAAM,OAAO,KAAK,OAAO,IAAI,CAAC,QAAS;AAAA,OACrD,MAAM,MAAM;AAAA;AAAA;AAMjB,iBAAe,OAAO,SAAS,EAAE,OAAO,SAAS,IAAI;AACnD,UAAM,OAAO,CAAC,WAAU;AACtB,UAAI,OAAO,OAAO,KAAK;AAEvB,YAAM,cAAc,OAAO;AAE3B,UAAI,CAAC,eAAe,KAAK,SAAS,KAAK,CAAC,aAAa,SAAQ;AAC3D,eAAO,KAAK,kBAAkB;AAAA;AAGhC,UAAI,OAAO,SAAQ;AACjB,cAAM,MAAM,cAAc,OAAM,QAAQ,QAAQ,KAAK;AAErD,cAAM,UAAU,cAAc,OAAM,QAAQ,WAAW,OAAM;AAE7D,YAAI,CAAC,SAAS,UAAU;AACtB,gBAAM,IAAI,MAAM,qCAAqC;AAAA;AAGvD,cAAM,MAAM;AAAA,UACV,OAAO,YAAY;AAAA,UACnB;AAAA;AAGF,YAAI,MAAM;AACR,cAAI,WAAW,eAAe,SAAS;AAAA;AAGzC,eAAO;AAAA;AAGT,UAAI,OAAO;AAAA,QACT,UAAU;AAAA,QACV,UAAU,KAAK;AAAA;AAGjB,WAAK,QAAQ,CAAC,QAAQ;AACpB,cAAM,QAAQ,OAAM;AAEpB,YAAI,QAAQ,QAAQ;AAClB,gBAAM,QAAQ,CAAC,SAAS;AACtB,iBAAK,SAAS,KAAK,KAAK;AAAA;AAAA;AAAA;AAK9B,aAAO;AAAA;AAGT,QAAI,CAAC,aAAa,QAAQ;AACxB,cAAQ,kBAAkB;AAAA;AAG5B,WAAO,KAAK;AAAA;AAId,0BACE,SACA,EAAE,kBAAkB,OAAO,mBAC3B;AACA,YAAQ,QAAQ,CAAC,WAAW;AAC1B,UAAI,aAAa;AAEjB,aAAO,QAAQ,QAAQ,CAAC,EAAE,KAAK,aAAM,YAAY;AAC/C,cAAM,SAAS,MAAM,IAAI,SAAS;AAElC,sBAAc,KAAK,IACjB,UAAU,KAAK,SAAS,OAAO,UAAU,OACxC,WAAU,KAAM,mBAAkB,IAAI;AAAA;AAI3C,aAAO,QAAQ;AAAA;AAAA;AAInB,4BAA0B,QAAQ,MAAM;AACtC,UAAM,UAAU,OAAO;AACvB,SAAK,UAAU;AAEf,QAAI,CAAC,UAAU,UAAU;AACvB;AAAA;AAGF,YAAQ,QAAQ,CAAC,UAAU;AACzB,UAAI,CAAC,UAAU,MAAM,YAAY,CAAC,MAAM,QAAQ,QAAQ;AACtD;AAAA;AAGF,YAAM,EAAE,SAAS,UAAU;AAE3B,UAAI,MAAM;AAAA,QACR;AAAA,QACA;AAAA;AAGF,UAAI,MAAM,KAAK;AACb,YAAI,MAAM,MAAM,IAAI;AAAA;AAGtB,UAAI,MAAM,MAAM,IAAI;AAClB,YAAI,WAAW,MAAM;AAAA;AAGvB,WAAK,QAAQ,KAAK;AAAA;AAAA;AAItB,0BAAwB,QAAQ,MAAM;AACpC,SAAK,QAAQ,OAAO;AAAA;AAGtB,kBACE,SACA,MACA;AAAA,IACE,iBAAiB,OAAO;AAAA,IACxB,eAAe,OAAO;AAAA,MACpB,IACJ;AACA,UAAM,eAAe;AAErB,QAAI;AAAgB,mBAAa,KAAK;AACtC,QAAI;AAAc,mBAAa,KAAK;AAEpC,WAAO,QAAQ,IAAI,CAAC,WAAW;AAC7B,YAAM,EAAE,QAAQ;AAEhB,YAAM,OAAO;AAAA,QACX,MAAM,KAAK;AAAA,QACX,UAAU;AAAA;AAGZ,UAAI,aAAa,QAAQ;AACvB,qBAAa,QAAQ,CAAC,gBAAgB;AACpC,sBAAY,QAAQ;AAAA;AAAA;AAIxB,aAAO;AAAA;AAAA;AAIX,mBAAW;AAAA,IACT,YAAY,MAAM,UAAU,IAAI,OAAO;AACrC,WAAK,UAAU,kCAAK,SAAW;AAE/B,UACE,KAAK,QAAQ,qBACb,OACA;AACA,cAAM,IAAI,MAAM;AAAA;AAGlB,WAAK,YAAY,IAAI,SAAS,KAAK,QAAQ;AAE3C,WAAK,cAAc,MAAM;AAAA;AAAA,IAG3B,cAAc,MAAM,OAAO;AACzB,WAAK,QAAQ;AAEb,UAAI,SAAS,CAAE,kBAAiB,YAAY;AAC1C,cAAM,IAAI,MAAM;AAAA;AAGlB,WAAK,WACH,SACA,YAAY,KAAK,QAAQ,MAAM,KAAK,OAAO;AAAA,QACzC,OAAO,KAAK,QAAQ;AAAA;AAAA;AAAA,IAI1B,IAAI,KAAK;AACP,UAAI,CAAC,UAAU,MAAM;AACnB;AAAA;AAGF,WAAK,MAAM,KAAK;AAChB,WAAK,SAAS,IAAI;AAAA;AAAA,IAGpB,OAAO,YAAY,MAAoB,OAAO;AAC5C,YAAM,UAAU;AAEhB,eAAS,IAAI,GAAG,MAAM,KAAK,MAAM,QAAQ,IAAI,KAAK,KAAK,GAAG;AACxD,cAAM,MAAM,KAAK,MAAM;AACvB,YAAI,UAAU,KAAK,IAAI;AACrB,eAAK,SAAS;AACd,eAAK;AACL,iBAAO;AAEP,kBAAQ,KAAK;AAAA;AAAA;AAIjB,aAAO;AAAA;AAAA,IAGT,SAAS,KAAK;AACZ,WAAK,MAAM,OAAO,KAAK;AACvB,WAAK,SAAS,SAAS;AAAA;AAAA,IAGzB,WAAW;AACT,aAAO,KAAK;AAAA;AAAA,IAGd,OAAO,OAAO,EAAE,QAAQ,OAAO,IAAI;AACjC,YAAM;AAAA,QACJ;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,UACE,KAAK;AAET,UAAI,UAAU,SAAS,SACnB,SAAS,KAAK,MAAM,MAClB,KAAK,kBAAkB,SACvB,KAAK,kBAAkB,SACzB,KAAK,eAAe;AAExB,qBAAe,SAAS,EAAE;AAE1B,UAAI,YAAY;AACd,gBAAQ,KAAK;AAAA;AAGf,UAAI,SAAS,UAAU,QAAQ,IAAI;AACjC,kBAAU,QAAQ,MAAM,GAAG;AAAA;AAG7B,aAAO,OAAO,SAAS,KAAK,OAAO;AAAA,QACjC;AAAA,QACA;AAAA;AAAA;AAAA,IAIJ,kBAAkB,OAAO;AACvB,YAAM,WAAW,eAAe,OAAO,KAAK;AAC5C,YAAM,EAAE,YAAY,KAAK;AACzB,YAAM,UAAU;AAGhB,cAAQ,QAAQ,CAAC,EAAE,GAAG,MAAM,GAAG,KAAK,GAAG,YAAW;AAChD,YAAI,CAAC,UAAU,OAAO;AACpB;AAAA;AAGF,cAAM,EAAE,SAAS,OAAO,YAAY,SAAS,SAAS;AAEtD,YAAI,SAAS;AACX,kBAAQ,KAAK;AAAA,YACX,MAAM;AAAA,YACN;AAAA,YACA,SAAS,CAAC,EAAE,OAAO,OAAO,MAAM,aAAM;AAAA;AAAA;AAAA;AAK5C,aAAO;AAAA;AAAA,IAGT,eAAe,OAAO;AAEpB,YAAM,aAAa,MAAM,OAAO,KAAK;AAErC,YAAM,WAAW,CAAC,MAAM,MAAM,QAAQ;AACpC,YAAI,CAAC,KAAK,UAAU;AAClB,gBAAM,EAAE,OAAO,aAAa;AAE5B,gBAAM,UAAU,KAAK,aAAa;AAAA,YAChC,KAAK,KAAK,UAAU,IAAI;AAAA,YACxB,OAAO,KAAK,SAAS,uBAAuB,MAAM;AAAA,YAClD;AAAA;AAGF,cAAI,WAAW,QAAQ,QAAQ;AAC7B,mBAAO;AAAA,cACL;AAAA,gBACE;AAAA,gBACA;AAAA,gBACA;AAAA;AAAA;AAAA;AAKN,iBAAO;AAAA;AAIT,gBAAQ,KAAK;AAAA,eACN,gBAAgB,KAAK;AACxB,kBAAM,MAAM;AACZ,qBAAS,IAAI,GAAG,MAAM,KAAK,SAAS,QAAQ,IAAI,KAAK,KAAK,GAAG;AAC3D,oBAAM,QAAQ,KAAK,SAAS;AAC5B,oBAAM,SAAS,SAAS,OAAO,MAAM;AACrC,kBAAI,OAAO,QAAQ;AACjB,oBAAI,KAAK,GAAG;AAAA,qBACP;AACL,uBAAO;AAAA;AAAA;AAGX,mBAAO;AAAA;AAAA,eAEJ,gBAAgB,IAAI;AACvB,kBAAM,MAAM;AACZ,qBAAS,IAAI,GAAG,MAAM,KAAK,SAAS,QAAQ,IAAI,KAAK,KAAK,GAAG;AAC3D,oBAAM,QAAQ,KAAK,SAAS;AAC5B,oBAAM,SAAS,SAAS,OAAO,MAAM;AACrC,kBAAI,OAAO,QAAQ;AACjB,oBAAI,KAAK,GAAG;AACZ;AAAA;AAAA;AAGJ,mBAAO;AAAA;AAAA;AAAA;AAKb,YAAM,UAAU,KAAK,SAAS;AAC9B,YAAM,YAAY;AAClB,YAAM,UAAU;AAEhB,cAAQ,QAAQ,CAAC,EAAE,GAAG,MAAM,GAAG,UAAU;AACvC,YAAI,UAAU,OAAO;AACnB,cAAI,aAAa,SAAS,YAAY,MAAM;AAE5C,cAAI,WAAW,QAAQ;AAErB,gBAAI,CAAC,UAAU,MAAM;AACnB,wBAAU,OAAO,EAAE,KAAK,MAAM,SAAS;AACvC,sBAAQ,KAAK,UAAU;AAAA;AAEzB,uBAAW,QAAQ,CAAC,EAAE,cAAc;AAClC,wBAAU,KAAK,QAAQ,KAAK,GAAG;AAAA;AAAA;AAAA;AAAA;AAMvC,aAAO;AAAA;AAAA,IAGT,kBAAkB,OAAO;AACvB,YAAM,WAAW,eAAe,OAAO,KAAK;AAC5C,YAAM,EAAE,MAAM,YAAY,KAAK;AAC/B,YAAM,UAAU;AAGhB,cAAQ,QAAQ,CAAC,EAAE,GAAG,MAAM,GAAG,UAAU;AACvC,YAAI,CAAC,UAAU,OAAO;AACpB;AAAA;AAGF,YAAI,UAAU;AAGd,aAAK,QAAQ,CAAC,KAAK,aAAa;AAC9B,kBAAQ,KACN,GAAG,KAAK,aAAa;AAAA,YACnB;AAAA,YACA,OAAO,KAAK;AAAA,YACZ;AAAA;AAAA;AAKN,YAAI,QAAQ,QAAQ;AAClB,kBAAQ,KAAK;AAAA,YACX;AAAA,YACA;AAAA,YACA;AAAA;AAAA;AAAA;AAKN,aAAO;AAAA;AAAA,IAET,aAAa,EAAE,KAAK,OAAO,YAAY;AACrC,UAAI,CAAC,UAAU,QAAQ;AACrB,eAAO;AAAA;AAGT,UAAI,UAAU;AAEd,UAAI,QAAQ,QAAQ;AAClB,cAAM,QAAQ,CAAC,EAAE,GAAG,MAAM,GAAG,KAAK,GAAG,YAAW;AAC9C,cAAI,CAAC,UAAU,OAAO;AACpB;AAAA;AAGF,gBAAM,EAAE,SAAS,OAAO,YAAY,SAAS,SAAS;AAEtD,cAAI,SAAS;AACX,oBAAQ,KAAK;AAAA,cACX;AAAA,cACA;AAAA,cACA,OAAO;AAAA,cACP;AAAA,cACA;AAAA,cACA;AAAA;AAAA;AAAA;AAAA,aAID;AACL,cAAM,EAAE,GAAG,MAAM,GAAG,UAAS;AAE7B,cAAM,EAAE,SAAS,OAAO,YAAY,SAAS,SAAS;AAEtD,YAAI,SAAS;AACX,kBAAQ,KAAK,EAAE,OAAO,KAAK,OAAO,MAAM,aAAM;AAAA;AAAA;AAIlD,aAAO;AAAA;AAAA;AAIX,OAAK,UAAU;AACf,OAAK,cAAc;AACnB,OAAK,aAAa;AAClB,OAAK,SAAS;AAEd;AACE,SAAK,aAAa;AAAA;AAGpB;AACE,aAAS;AAAA;AAGX,MAAO,mBAAQ;;;ACjvDf,MAAM,cAAc;AAAA,IAChB,gBAAgB;AAAA,IAChB,MAAM,CAAC;AAAA;AAGJ,MAAM,OAAoB,IAAI,iBAAK,IAAI;AAEvC,MAAM,mBAAmB,CAAO,UAAqC;AACxE,UAAM,OAAO,MAAM,MAAM,gBAAgB,IAAI,OAAO;AACpD,UAAM,OAAO,MAAM,KAAK;AAExB,UAAK,cAAc;AAAA;;;ACLhB,MAAM,oBAAoB,CAAC,UAAuB;AACrD,UAAM,uBAAuB;AAE7B,QAAI,CAAE,OAAM,kBAAkB,mBAAmB;AAC7C,YAAM,IAAI,MAAM;AAAA;AAGpB,UAAM,EAAE,UAAU,MAAM;AACxB,UAAM,EAAE,WAAW,eAAe;AAElC,yBAAqB,YAAY;AAEjC,QAAI,MAAM,SAAS,GAAG;AAClB,YAAM,UAAU,KAAK,OAAO;AAE5B,YAAM,iBAAiB,QAAQ,MAAM,GAAG,GAAG,IAAI,CAAC,QAAQ,UAAU;AAC9D,cAAM,EAAE,MAAM,YAAY;AAE1B,YAAI,SAAS;AACT,gBAAM,YAAY,QAAQ,KAAK,CAAC,UAAU,MAAM,QAAQ;AAExD,cAAI,WAAW;AACX,kBAAM,EAAE,YAAY;AACpB,mBAAO,mBAAmB,MAAM,SAAS;AAAA;AAAA;AAIjD,cAAM,IAAI,MAAM;AAAA;AAGpB,YAAM,aAAa,eAAe,SAAS;AAE3C,UAAI,YAAY;AACZ,uBAAe,QAAQ,CAAC,YAAY,qBAAqB,YAAY;AAErE,cAAM,2BAA2B,QAAQ,UACrC,CAAC,EAAE,MAAM,EAAE,aAAa,SAAS;AAGrC,YAAI,2BAA2B,MAAM,4BAA4B,YAAY;AACzE,yBAAe;AAAA,eACZ;AACH,yBAAe;AAAA;AAAA;AAIvB,UAAI,CAAC,YAAY;AACb,cAAM,kBAAkB;AACxB,6BAAqB,YAAY;AAAA;AAGrC,2BAAqB,UAAU,OAAO;AAAA;AAG1C,QAAI,MAAM,WAAW,GAAG;AACpB,2BAAqB,UAAU,IAAI;AAAA;AAAA;AAIpC,MAAM,mBAAmB,CAAC,UAA+B;AAC5D,UAAM,uBAAuB;AAE7B,UAAM,EAAE,QAAQ;AAEhB,QAAI,QAAQ,aAAa;AACrB,YAAM;AACN,YAAM,EAAE,eAAe;AAEvB,YAAM,iBAAiB,qBAAqB,SAAS,SAAS;AAE9D,UAAI,aAAa,gBAAgB;AAC7B,yBAAiB;AACjB,uBAAe,aAAa;AAAA;AAGhC,UAAI,eAAe,gBAAgB;AAC/B,yBAAiB;AACjB,uBAAe;AAAA;AAAA;AAIvB,QAAI,QAAQ,WAAW;AACnB,YAAM;AACN,YAAM,EAAE,eAAe;AAEvB,YAAM,iBAAiB,qBAAqB,SAAS,SAAS;AAE9D,UAAI,aAAa,GAAG;AAChB,yBAAiB;AACjB,uBAAe,aAAa;AAAA;AAGhC,UAAI,eAAe,GAAG;AAClB,yBAAiB;AACjB,uBAAe;AAAA;AAAA;AAIvB,QAAI,QAAQ,SAAS;AACjB,YAAM;AACN,YAAM,EAAE,cAAc;AAEtB,aAAO,SAAS,OAAO;AAAA;AAG3B,QAAI,QAAQ,OAAO;AACf,YAAM,EAAE,eAAe;AACvB,uBAAiB;AAAA;AAAA;;;AC5GzB,MAAI,mBAAmB,WAAW;AAC9B,WAAO,iBAAiB,QAAQ,MAAM;AAClC,gBAAU,cAAc,SAAS;AAAA;AAAA;AAIzC,mBAAiB;AAEjB,MAAM,aAAa,MAAM;AACrB,UAAM,gBAAgB;AACtB,UAAM,cAAc;AACpB,UAAM,mBAAmB;AAEzB,gBAAY,iBAAiB,SAAS;AACtC,gBAAY,iBAAiB,SAAS;AACtC,gBAAY,iBAAiB,WAAW;AAExC,kBAAc,iBAAiB,YAAY,CAAC,UAAU;AAClD,YAAM,gBAAgB,MAAM;AAC5B,UAAI,kBAAkB,MAAM;AACxB,yBAAiB,UAAU,IAAI;AAAA;AAGnC,UAAI,yBAAyB,eAAe,CAAC,cAAc,QAAQ,sBAAsB;AACrF,yBAAiB,UAAU,IAAI;AAAA;AAAA;AAAA;AAK3C,MAAI,SAAS,eAAe,WAAW;AACnC;AAAA,SACG;AACH,aAAS,iBAAiB,oBAAoB,MAAM;AAChD;AAAA;AAAA;",
  "names": []
}
