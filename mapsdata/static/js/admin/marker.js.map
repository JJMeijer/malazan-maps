{
  "version": 3,
  "sources": ["../../../src/ts/admin/marker.ts"],
  "sourcesContent": ["export interface NaturalDimensions {\n    naturalWidth: number;\n    naturalHeight: number;\n}\n\nexport interface RealDimensions {\n    width: number;\n    height: number;\n}\n\nconst getElementNaturalDimensions = (element: HTMLImageElement): NaturalDimensions => {\n    const { naturalHeight, naturalWidth } = element;\n\n    return {\n        naturalHeight,\n        naturalWidth,\n    };\n};\n\nconst getElementRealDimensions = (element: HTMLElement): RealDimensions => {\n    const { width, height } = element.getBoundingClientRect();\n\n    return {\n        width,\n        height,\n    };\n};\n\nconst placeImageMarker = (): void => {\n    const mapElement = document.getElementById('map-image');\n    const markerElement = document.getElementById('map-marker');\n\n    if (mapElement instanceof HTMLImageElement && markerElement instanceof HTMLElement) {\n        const mapNaturalDimensions = getElementNaturalDimensions(mapElement);\n        const mapRealDimensions = getElementRealDimensions(mapElement);\n\n        const markerRealDimensions = getElementRealDimensions(markerElement);\n\n        const { markerx, markery } = markerElement.dataset;\n\n        if (markerx && markery) {\n            const markerRelativeX = Math.round(\n                (parseInt(markerx) * mapRealDimensions.width) / mapNaturalDimensions.naturalWidth -\n                    markerRealDimensions.width / 2,\n            );\n\n            const markerRelativeY = Math.round(\n                (parseInt(markery) * mapRealDimensions.height) /\n                    mapNaturalDimensions.naturalHeight -\n                    markerRealDimensions.height,\n            );\n\n            markerElement.style.top = `${markerRelativeY}px`;\n            markerElement.style.left = `${markerRelativeX}px`;\n            markerElement.style.opacity = '0.9';\n        } else {\n            throw new Error('Marker coordinates not provided');\n        }\n    } else {\n        throw new Error('Invalid Map or Marker element');\n    }\n};\n\nconst setEventListeners = (): void => {\n    window.addEventListener('resize', placeImageMarker);\n\n    const xInputField = document.querySelector('.fieldBox.field-x input');\n    const yInputField = document.querySelector('.fieldBox.field-y input');\n\n    const markerElement = document.getElementById('map-marker');\n\n    if (!(xInputField instanceof HTMLInputElement)) {\n        throw new Error('X Input field not found');\n    }\n\n    if (!(yInputField instanceof HTMLInputElement)) {\n        throw new Error('Y Input field not found');\n    }\n\n    if (!(markerElement instanceof HTMLImageElement)) {\n        throw new Error('Marker element not found');\n    }\n\n    xInputField.addEventListener('change', () => {\n        const newValue = xInputField.value;\n        markerElement.dataset['markerx'] = newValue;\n        placeImageMarker();\n    });\n\n    yInputField.addEventListener('change', () => {\n        const newValue = yInputField.value;\n        markerElement.dataset['markery'] = newValue;\n        placeImageMarker();\n    });\n};\n\nconst initMarkerPage = (): void => {\n    placeImageMarker();\n    setEventListeners();\n};\n\ndocument.addEventListener('DOMContentLoaded', () => {\n    const markerForm = document.getElementById('marker_form');\n\n    if (markerForm instanceof HTMLFormElement) {\n        const visibleImage = document.getElementById('map-image');\n\n        if (visibleImage === null || !(visibleImage instanceof HTMLImageElement)) {\n            throw new Error('No Image Available on Marker page');\n        }\n\n        if (visibleImage.complete) {\n            initMarkerPage();\n        } else {\n            visibleImage.addEventListener('load', () => {\n                initMarkerPage();\n            });\n        }\n    }\n});\n"],
  "mappings": ";;AAUA,MAAM,8BAA8B,CAAC,YAAiD;AAClF,UAAM,EAAE,eAAe,iBAAiB;AAExC,WAAO;AAAA,MACH;AAAA,MACA;AAAA;AAAA;AAIR,MAAM,2BAA2B,CAAC,YAAyC;AACvE,UAAM,EAAE,OAAO,WAAW,QAAQ;AAElC,WAAO;AAAA,MACH;AAAA,MACA;AAAA;AAAA;AAIR,MAAM,mBAAmB,MAAY;AACjC,UAAM,aAAa,SAAS,eAAe;AAC3C,UAAM,gBAAgB,SAAS,eAAe;AAE9C,QAAI,sBAAsB,oBAAoB,yBAAyB,aAAa;AAChF,YAAM,uBAAuB,4BAA4B;AACzD,YAAM,oBAAoB,yBAAyB;AAEnD,YAAM,uBAAuB,yBAAyB;AAEtD,YAAM,EAAE,SAAS,YAAY,cAAc;AAE3C,UAAI,WAAW,SAAS;AACpB,cAAM,kBAAkB,KAAK,MACxB,SAAS,WAAW,kBAAkB,QAAS,qBAAqB,eACjE,qBAAqB,QAAQ;AAGrC,cAAM,kBAAkB,KAAK,MACxB,SAAS,WAAW,kBAAkB,SACnC,qBAAqB,gBACrB,qBAAqB;AAG7B,sBAAc,MAAM,MAAM,GAAG;AAC7B,sBAAc,MAAM,OAAO,GAAG;AAC9B,sBAAc,MAAM,UAAU;AAAA,aAC3B;AACH,cAAM,IAAI,MAAM;AAAA;AAAA,WAEjB;AACH,YAAM,IAAI,MAAM;AAAA;AAAA;AAIxB,MAAM,oBAAoB,MAAY;AAClC,WAAO,iBAAiB,UAAU;AAElC,UAAM,cAAc,SAAS,cAAc;AAC3C,UAAM,cAAc,SAAS,cAAc;AAE3C,UAAM,gBAAgB,SAAS,eAAe;AAE9C,QAAI,CAAE,wBAAuB,mBAAmB;AAC5C,YAAM,IAAI,MAAM;AAAA;AAGpB,QAAI,CAAE,wBAAuB,mBAAmB;AAC5C,YAAM,IAAI,MAAM;AAAA;AAGpB,QAAI,CAAE,0BAAyB,mBAAmB;AAC9C,YAAM,IAAI,MAAM;AAAA;AAGpB,gBAAY,iBAAiB,UAAU,MAAM;AACzC,YAAM,WAAW,YAAY;AAC7B,oBAAc,QAAQ,aAAa;AACnC;AAAA;AAGJ,gBAAY,iBAAiB,UAAU,MAAM;AACzC,YAAM,WAAW,YAAY;AAC7B,oBAAc,QAAQ,aAAa;AACnC;AAAA;AAAA;AAIR,MAAM,iBAAiB,MAAY;AAC/B;AACA;AAAA;AAGJ,WAAS,iBAAiB,oBAAoB,MAAM;AAChD,UAAM,aAAa,SAAS,eAAe;AAE3C,QAAI,sBAAsB,iBAAiB;AACvC,YAAM,eAAe,SAAS,eAAe;AAE7C,UAAI,iBAAiB,QAAQ,CAAE,yBAAwB,mBAAmB;AACtE,cAAM,IAAI,MAAM;AAAA;AAGpB,UAAI,aAAa,UAAU;AACvB;AAAA,aACG;AACH,qBAAa,iBAAiB,QAAQ,MAAM;AACxC;AAAA;AAAA;AAAA;AAAA;",
  "names": []
}
