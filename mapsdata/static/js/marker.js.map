{
  "version": 3,
  "sources": ["../../src/ts/marker.ts"],
  "sourcesContent": ["export interface NaturalDimensions {\n    naturalWidth: number;\n    naturalHeight: number;\n}\n\nexport interface RealDimensions {\n    width: number;\n    height: number;\n}\n\nconst getElementNaturalDimensions = (element: HTMLImageElement): NaturalDimensions => {\n    const { naturalHeight, naturalWidth } = element;\n\n    return {\n        naturalHeight,\n        naturalWidth,\n    };\n};\n\nconst getElementRealDimensions = (element: HTMLElement): RealDimensions => {\n    const { width, height } = element.getBoundingClientRect();\n\n    return {\n        width,\n        height,\n    };\n};\n\nconst placeImageMarker = (mapId: string): void => {\n    const mapElement = document.getElementById(`map-image-${mapId}`);\n    const markerElement = document.getElementById(`map-marker-${mapId}`);\n\n    if (mapElement instanceof HTMLImageElement && markerElement instanceof HTMLElement) {\n        const mapNaturalDimensions = getElementNaturalDimensions(mapElement);\n        const mapRealDimensions = getElementRealDimensions(mapElement);\n\n        const markerRealDimensions = getElementRealDimensions(markerElement);\n\n        const { markerx, markery } = markerElement.dataset;\n\n        if (markerx && markery) {\n            const markerRelativeX = Math.round(\n                (parseInt(markerx) * mapRealDimensions.width) / mapNaturalDimensions.naturalWidth -\n                    markerRealDimensions.width / 2,\n            );\n\n            const markerRelativeY = Math.round(\n                (parseInt(markery) * mapRealDimensions.height) /\n                    mapNaturalDimensions.naturalHeight -\n                    markerRealDimensions.height,\n            );\n\n            markerElement.style.top = `${markerRelativeY}px`;\n            markerElement.style.left = `${markerRelativeX}px`;\n\n            markerElement.classList.remove('opacity-0');\n            markerElement.classList.add('opacity-90');\n        } else {\n            throw new Error('Marker coordinates not provided');\n        }\n    } else {\n        throw new Error('Invalid Map or Marker element');\n    }\n};\n\nconst getMapId = (text: string): string => {\n    const lastKebabCaseItem = text.split('-').slice(-1);\n\n    if (lastKebabCaseItem[0]) {\n        return lastKebabCaseItem[0];\n    }\n\n    throw new Error('Map ID not found');\n};\n\nconst handleMapSelectorChange = (event: Event) => {\n    const target = event.target as HTMLElement; // Assumption that event.target exists\n    const mapId = getMapId(target.id);\n\n    const mapWrappers = document.querySelectorAll('[id^=map-imagewrapper-]');\n\n    // Hide all maps\n    mapWrappers.forEach((mapWrapper) => {\n        if (!mapWrapper.classList.contains('hidden')) {\n            mapWrapper.classList.add('hidden');\n        }\n    });\n\n    // Remove hidden from selected Map\n    const selectedImageWrapper = document.getElementById(`map-imagewrapper-${mapId}`);\n    if (selectedImageWrapper) {\n        selectedImageWrapper.classList.remove('hidden');\n    }\n\n    // Place Marker in Selected Map\n    placeImageMarker(mapId);\n};\n\nconst setImageSelectorListener = () => {\n    const mapButtons = document.querySelectorAll('input[name=\"map-selector\"]');\n    const mapButtonSpans = document.querySelectorAll('input[name=\"map-selector\"]~span');\n\n    mapButtons.forEach((element) => {\n        if (!(element instanceof HTMLInputElement)) {\n            throw new Error('Map Input has unexpected type');\n        }\n\n        element.addEventListener('change', handleMapSelectorChange);\n    });\n\n    mapButtonSpans.forEach((element) => {\n        if (!(element instanceof HTMLSpanElement)) {\n            throw new Error('Map button has unexpected type');\n        }\n\n        element.addEventListener('keydown', (event) => {\n            const { key } = event;\n\n            if (key === 'Enter') {\n                const inputSibling = element.previousElementSibling;\n\n                if (!(inputSibling instanceof HTMLInputElement)) {\n                    throw new Error('Map Button input element missing');\n                }\n\n                inputSibling.checked = true;\n\n                const changeEvent = new Event('change');\n                inputSibling.dispatchEvent(changeEvent);\n            }\n        });\n    });\n};\n\nconst placeVisibleMarker = () => {\n    const visibleImageWrapper = document.querySelector('[id^=\"map-imagewrapper-\"]:not(.hidden)');\n\n    if (visibleImageWrapper) {\n        const mapId = getMapId(visibleImageWrapper.id);\n        placeImageMarker(mapId);\n    }\n};\n\nconst getVisibleImage = (): HTMLElement | null => {\n    const visibleImageWrapper = document.querySelector('[id^=\"map-imagewrapper-\"]:not(.hidden)');\n\n    if (visibleImageWrapper) {\n        const mapId = getMapId(visibleImageWrapper.id);\n        return document.querySelector(`#map-image-${mapId}`);\n    }\n\n    return null;\n};\n\nconst initMarkerPage = (): void => {\n    placeVisibleMarker();\n    window.addEventListener('resize', placeVisibleMarker);\n    setImageSelectorListener();\n};\n\ndocument.addEventListener('DOMContentLoaded', () => {\n    const visibleImage = getVisibleImage();\n\n    if (visibleImage === null || !(visibleImage instanceof HTMLImageElement)) {\n        throw new Error('No Image Available on Marker page');\n    }\n\n    if (visibleImage.complete) {\n        initMarkerPage();\n    } else {\n        visibleImage.addEventListener('load', () => {\n            initMarkerPage();\n        });\n    }\n});\n"],
  "mappings": "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",
  "names": []
}
